/**
 * <copyright>
 *
 * Copyright (c) 2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 */
grammar org.eclipse.qvto.examples.xtext.imperativeocl.ImperativeOCL with org.eclipse.ocl.xtext.essentialocl.EssentialOCL

//generate imperativeoclcs "http://www.eclipse.org/qvt/pivot/1.0/ImperativeOCLCS"
//import "http://www.eclipse.org/qvt/pivot/1.0/ImperativeOCLCS"
import "platform:/resource/org.eclipse.qvto.examples.xtext.imperativeocl/model/ImperativeOCLCS.ecore"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://www.eclipse.org/ocl/3.1.0/BaseCST" as base
//import "http://www.eclipse.org/ocl/3.1.0/EssentialOCLCST" as essentialocl
import "platform:/resource/org.eclipse.ocl.xtext.base/model/BaseCS.ecore" as base
import "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.ecore" as essentialocl

GrammmarCS returns essentialocl::ExpCS: ImperativeOCLExpCS;

terminal ACCESS_OP: '.' | '->' | '!->';

// terminal ADD_OP: '+' | '-';

terminal ASSIGN_OP: ':=' | '::=' | '+=' | '-=';

terminal CMP_OP: '=' | '==' | '<>' | '<' | '>' | '<=' | '>=';

terminal MULT_OP: '*' | '/' | '%';

terminal MULTI_ITERATOR_OP: 'forAll';

// terminal OR_OP: 'or' | 'xor';

terminal RESOLVE_IN_KIND: 'resolveIn' | 'resolveoneIn' | 'invresolveIn' | 'invresolveoneIn';

terminal RESOLVE_KIND: 'resolve' | 'resolveone' | 'invresolve' | 'invresolveone';

terminal SIMPLE_ITERATOR_OP: 'reject' | 'select' | 'collect' | 'exists'
| 'one' | 'any' | 'isUnique' | 'collectNested'
| 'sortedBy' | 'xselect' | 'xcollect'
| 'selectOne' | 'collectOne'
| 'collectselect' | 'collectselectOne';

terminal UNARY_OP: '-' | 'not' | '#' | '##' | '*';

ImperativeOCLReservedKeyword:
	'default'
	| 'elif'
	| RESOLVE_KIND
	| RESOLVE_IN_KIND;

ImperativeOCLPrefixOperator:
	'#' | '##' | '*';

ImperativeOCLInfixOperator:
	ASSIGN_OP | 'default' | '==';

ImperativeOCLNavigationOperator:
	'!->';

//PrefixOperator:
//	EssentialOCLPrefixOperator | QVToPrefixOperator;
//
//InfixOperator:
//	EssentialOCLInfixOperator | QVToInfixOperator;
//
//NavigationOperator:
//	EssentialOCLNavigationOperator | QVToNavigationOperator;

ImperativeOCLExpCS returns essentialocl::ExpCS: ExpCS;

// ********* ImperativeOCL Types *********

// TypeLiteralCS redefined to include the new List and Dict types
// FIXME refactor its definition in EssentialOCL to allow extension
TypeLiteralCS returns base::TypedRefCS:
	PrimitiveTypeCS
	| CollectionTypeCS
	| MapTypeCS
	| TupleTypeCS
	| ListTypeCS
	| DictTypeCS;

ListTypeCS : 
	'List' '(' type=TypeExpCS ')'
;


DictTypeCS : 
	'Dict' '(' keyType=TypeExpCS ',' valueType=TypeExpCS ')'
;

// ********* ImperativeOCL Expressions *********
// PrimaryExpCS redefined to include the new List and Dict literal expressions
// FIXME refactor its definition in EssentialOCL to allow extension
PrimaryExpCS returns essentialocl::ExpCS:	// These rules are ordered most rejectable first
	NestedExpCS
|	IfExpCS
|	SelfExpCS
|	PrimitiveLiteralExpCS
|	TupleLiteralExpCS
|	MapLiteralExpCS
|	CollectionLiteralExpCS
|	LambdaLiteralExpCS
|	ListLiteralExpCS
|	DictLiteralExpCS
|	TypeLiteralExpCS
|	ReturnExpCS
|	NameExpCS
;
	
ListLiteralExpCS : 
	'List' '{' {ListLiteralExpCS} 
		(ownedParts+=CollectionLiteralPartCS
		(',' ownedParts+=CollectionLiteralPartCS)*)? 
	'}'
;

DictLiteralExpCS : 
	'Dict' '{' {DictLiteralExpCS}
		(ownedParts+=DictLiteralPartCS
		(',' ownedParts+=DictLiteralPartCS)*)? 
	'}'
;

DictLiteralPartCS :
	key = PrimitiveLiteralExpCS '=' value = ExpCS
;
 	
ReturnExpCS : 
	'return' {ReturnExpCS} (value = ExpCS)?
;

BlockExpCS :
	'{' expressions+=ExpCS '}'
;

StringLiteral:
	SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
;