/**
 * <copyright>
 * Copyright (c) 2008, 2009 Open Canarias S.L. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     A. Sanchez-Barbudo  - initial API and implementation
 * </copyright>
 *
 * $Id: ImperativeOCLItemProviderAdapterFactory.java,v 1.4 2009/12/09 14:02:55 radvorak Exp $
 */
package org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.util.ImperativeOCLAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ImperativeOCLItemProviderAdapterFactory extends ImperativeOCLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ImperativeOCLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.AltExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltExpItemProvider altExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.AltExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAltExpAdapter() {
		if (altExpItemProvider == null) {
			altExpItemProvider = new AltExpItemProvider(this);
		}

		return altExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.AssertExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssertExpItemProvider assertExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.AssertExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssertExpAdapter() {
		if (assertExpItemProvider == null) {
			assertExpItemProvider = new AssertExpItemProvider(this);
		}

		return assertExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.AssignExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignExpItemProvider assignExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.AssignExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignExpAdapter() {
		if (assignExpItemProvider == null) {
			assignExpItemProvider = new AssignExpItemProvider(this);
		}

		return assignExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.BlockExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockExpItemProvider blockExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.BlockExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockExpAdapter() {
		if (blockExpItemProvider == null) {
			blockExpItemProvider = new BlockExpItemProvider(this);
		}

		return blockExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.BreakExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreakExpItemProvider breakExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.BreakExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreakExpAdapter() {
		if (breakExpItemProvider == null) {
			breakExpItemProvider = new BreakExpItemProvider(this);
		}

		return breakExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.CatchExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CatchExpItemProvider catchExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.CatchExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCatchExpAdapter() {
		if (catchExpItemProvider == null) {
			catchExpItemProvider = new CatchExpItemProvider(this);
		}

		return catchExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ComputeExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputeExpItemProvider computeExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ComputeExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputeExpAdapter() {
		if (computeExpItemProvider == null) {
			computeExpItemProvider = new ComputeExpItemProvider(this);
		}

		return computeExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ContinueExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinueExpItemProvider continueExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ContinueExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinueExpAdapter() {
		if (continueExpItemProvider == null) {
			continueExpItemProvider = new ContinueExpItemProvider(this);
		}

		return continueExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.DictLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DictLiteralExpItemProvider dictLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.DictLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDictLiteralExpAdapter() {
		if (dictLiteralExpItemProvider == null) {
			dictLiteralExpItemProvider = new DictLiteralExpItemProvider(this);
		}

		return dictLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.DictLiteralPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DictLiteralPartItemProvider dictLiteralPartItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.DictLiteralPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDictLiteralPartAdapter() {
		if (dictLiteralPartItemProvider == null) {
			dictLiteralPartItemProvider = new DictLiteralPartItemProvider(this);
		}

		return dictLiteralPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.DictionaryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DictionaryTypeItemProvider dictionaryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.DictionaryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDictionaryTypeAdapter() {
		if (dictionaryTypeItemProvider == null) {
			dictionaryTypeItemProvider = new DictionaryTypeItemProvider(this);
		}

		return dictionaryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ForExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForExpItemProvider forExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ForExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForExpAdapter() {
		if (forExpItemProvider == null) {
			forExpItemProvider = new ForExpItemProvider(this);
		}

		return forExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ImperativeIterateExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImperativeIterateExpItemProvider imperativeIterateExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ImperativeIterateExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImperativeIterateExpAdapter() {
		if (imperativeIterateExpItemProvider == null) {
			imperativeIterateExpItemProvider = new ImperativeIterateExpItemProvider(this);
		}

		return imperativeIterateExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.InstantiationExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstantiationExpItemProvider instantiationExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.InstantiationExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstantiationExpAdapter() {
		if (instantiationExpItemProvider == null) {
			instantiationExpItemProvider = new InstantiationExpItemProvider(this);
		}

		return instantiationExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ListLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListLiteralExpItemProvider listLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ListLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListLiteralExpAdapter() {
		if (listLiteralExpItemProvider == null) {
			listLiteralExpItemProvider = new ListLiteralExpItemProvider(this);
		}

		return listLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListTypeItemProvider listTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListTypeAdapter() {
		if (listTypeItemProvider == null) {
			listTypeItemProvider = new ListTypeItemProvider(this);
		}

		return listTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.LogExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogExpItemProvider logExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.LogExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogExpAdapter() {
		if (logExpItemProvider == null) {
			logExpItemProvider = new LogExpItemProvider(this);
		}

		return logExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.OrderedTupleLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderedTupleLiteralExpItemProvider orderedTupleLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.OrderedTupleLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderedTupleLiteralExpAdapter() {
		if (orderedTupleLiteralExpItemProvider == null) {
			orderedTupleLiteralExpItemProvider = new OrderedTupleLiteralExpItemProvider(this);
		}

		return orderedTupleLiteralExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.OrderedTupleLiteralPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderedTupleLiteralPartItemProvider orderedTupleLiteralPartItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.OrderedTupleLiteralPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderedTupleLiteralPartAdapter() {
		if (orderedTupleLiteralPartItemProvider == null) {
			orderedTupleLiteralPartItemProvider = new OrderedTupleLiteralPartItemProvider(this);
		}

		return orderedTupleLiteralPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.OrderedTupleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderedTupleTypeItemProvider orderedTupleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.OrderedTupleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderedTupleTypeAdapter() {
		if (orderedTupleTypeItemProvider == null) {
			orderedTupleTypeItemProvider = new OrderedTupleTypeItemProvider(this);
		}

		return orderedTupleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.RaiseExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RaiseExpItemProvider raiseExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.RaiseExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRaiseExpAdapter() {
		if (raiseExpItemProvider == null) {
			raiseExpItemProvider = new RaiseExpItemProvider(this);
		}

		return raiseExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ReturnExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnExpItemProvider returnExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.ReturnExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnExpAdapter() {
		if (returnExpItemProvider == null) {
			returnExpItemProvider = new ReturnExpItemProvider(this);
		}

		return returnExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.SwitchExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchExpItemProvider switchExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.SwitchExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchExpAdapter() {
		if (switchExpItemProvider == null) {
			switchExpItemProvider = new SwitchExpItemProvider(this);
		}

		return switchExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.TryExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TryExpItemProvider tryExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.TryExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTryExpAdapter() {
		if (tryExpItemProvider == null) {
			tryExpItemProvider = new TryExpItemProvider(this);
		}

		return tryExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.Typedef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedefItemProvider typedefItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.Typedef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedefAdapter() {
		if (typedefItemProvider == null) {
			typedefItemProvider = new TypedefItemProvider(this);
		}

		return typedefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.UnlinkExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnlinkExpItemProvider unlinkExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.UnlinkExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnlinkExpAdapter() {
		if (unlinkExpItemProvider == null) {
			unlinkExpItemProvider = new UnlinkExpItemProvider(this);
		}

		return unlinkExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.UnpackExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnpackExpItemProvider unpackExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.UnpackExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnpackExpAdapter() {
		if (unpackExpItemProvider == null) {
			unpackExpItemProvider = new UnpackExpItemProvider(this);
		}

		return unpackExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.VariableInitExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableInitExpItemProvider variableInitExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.VariableInitExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableInitExpAdapter() {
		if (variableInitExpItemProvider == null) {
			variableInitExpItemProvider = new VariableInitExpItemProvider(this);
		}

		return variableInitExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.WhileExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileExpItemProvider whileExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.m2m.qvt.oml.ecore.ImperativeOCL.WhileExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileExpAdapter() {
		if (whileExpItemProvider == null) {
			whileExpItemProvider = new WhileExpItemProvider(this);
		}

		return whileExpItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (altExpItemProvider != null) altExpItemProvider.dispose();
		if (assertExpItemProvider != null) assertExpItemProvider.dispose();
		if (assignExpItemProvider != null) assignExpItemProvider.dispose();
		if (blockExpItemProvider != null) blockExpItemProvider.dispose();
		if (breakExpItemProvider != null) breakExpItemProvider.dispose();
		if (catchExpItemProvider != null) catchExpItemProvider.dispose();
		if (computeExpItemProvider != null) computeExpItemProvider.dispose();
		if (continueExpItemProvider != null) continueExpItemProvider.dispose();
		if (dictLiteralExpItemProvider != null) dictLiteralExpItemProvider.dispose();
		if (dictLiteralPartItemProvider != null) dictLiteralPartItemProvider.dispose();
		if (dictionaryTypeItemProvider != null) dictionaryTypeItemProvider.dispose();
		if (forExpItemProvider != null) forExpItemProvider.dispose();
		if (imperativeIterateExpItemProvider != null) imperativeIterateExpItemProvider.dispose();
		if (instantiationExpItemProvider != null) instantiationExpItemProvider.dispose();
		if (listLiteralExpItemProvider != null) listLiteralExpItemProvider.dispose();
		if (listTypeItemProvider != null) listTypeItemProvider.dispose();
		if (logExpItemProvider != null) logExpItemProvider.dispose();
		if (orderedTupleLiteralExpItemProvider != null) orderedTupleLiteralExpItemProvider.dispose();
		if (orderedTupleLiteralPartItemProvider != null) orderedTupleLiteralPartItemProvider.dispose();
		if (orderedTupleTypeItemProvider != null) orderedTupleTypeItemProvider.dispose();
		if (raiseExpItemProvider != null) raiseExpItemProvider.dispose();
		if (returnExpItemProvider != null) returnExpItemProvider.dispose();
		if (switchExpItemProvider != null) switchExpItemProvider.dispose();
		if (tryExpItemProvider != null) tryExpItemProvider.dispose();
		if (typedefItemProvider != null) typedefItemProvider.dispose();
		if (unlinkExpItemProvider != null) unlinkExpItemProvider.dispose();
		if (unpackExpItemProvider != null) unpackExpItemProvider.dispose();
		if (variableInitExpItemProvider != null) variableInitExpItemProvider.dispose();
		if (whileExpItemProvider != null) whileExpItemProvider.dispose();
	}

}
