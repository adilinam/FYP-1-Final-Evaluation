modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation bug422315;

main() {
	// OCL 2.3.1
	//
	// Collection(T2)::closure()
	//   OrderedSet/Sequence -> OrderedSet(T)
	//   Other -> Set(T)
	
	// Collection(T)::product(c: Collection(T2))
	//   All -> Set( Tuple( first: T, second: T2) )
	
	// Collection(T)::flatten() 
	//   Set/OrderedSet -> Set(T)
	//   Bag -> Bag(T)
	//   Sequence -> Sequence(T)
	
	// Collection(T)::sortedBy() 
	//   Sequence/Bag -> Sequence
	//   Set/OrderedSet -> OrderedSet
	
	testList();
	testSequence();
	testOrderedSet();
	testSet();
	testBag();
	
	testIterateOne(List{}, List{null}, List{object EClass{}});
	testIterateOne(Sequence{}, Sequence{null}, Sequence{object EClass{}});
	testIterateOne(OrderedSet{}, OrderedSet{null}, OrderedSet{object EClass{}});
	testIterateOne(Set{}, Set{null}, Set{object EClass{}});
	testIterateOne(Bag{}, Bag{null}, Bag{object EClass{}});
}

helper testList() {
	var _coll := List{object EClass{name:='n'}};
		
	var select        : Sequence(EClass) := _coll->select(true);
	var reject        : Sequence(EClass) := _coll->reject(true);
	var collect       : Sequence(EClass) := _coll->collect(clone().oclAsType(EClass));
	var collectNested : Sequence(EClass) := _coll->collectNested(clone().oclAsType(EClass));
	var closure       : OrderedSet(EClass) := _coll->closure(oclAsType(EClass));
	var sortedBy      : Sequence(EClass) := _coll->sortedBy(name);
	 
	var product       : Set(Tuple(first:EClass,second:EClass)) := _coll->product(Bag{_coll->any(true)});
	var flatten       : Sequence(EClass) := _coll->flatten();

	var collect_s     : Sequence(EClass) := _coll.clone().oclAsType(EClass); -- shorthand for collect
	var xcollectt     : Sequence(EClass) := _coll->xcollect(clone().oclAsType(EClass));
	var xcollectt_s   : Sequence(EClass) := _coll->clone().oclAsType(EClass); -- shorhand for xcollect
	var xselectt      : Sequence(EClass) := _coll->xselect(true);
	var xselectt_s    : Sequence(EClass) := _coll[true]; -- shorthand for xselect
	var collsell      : Sequence(EClass) := _coll->collectselect(i;res=i.clone().oclAsType(EClass)|true);
	var collsell_s    : Sequence(EClass) := _coll->clone()[EClass]; -- shorhand for collectselect
	
	return null;
}

helper testSequence() {
	var _coll := Sequence {object EClass{name:='n'}};
		
	var select        : Sequence(EClass) := _coll->select(true);
	var reject        : Sequence(EClass) := _coll->reject(true);
	var collect       : Sequence(EClass) := _coll->collect(clone().oclAsType(EClass));
	var collectNested : Sequence(EClass) := _coll->collectNested(clone().oclAsType(EClass));
	var closure       : OrderedSet(EClass) := _coll->closure(oclAsType(EClass));
	var sortedBy      : Sequence(EClass) := _coll->sortedBy(name);
	 
	var product       : Set(Tuple(first:EClass,second:EClass)) := _coll->product(Bag{_coll->any(true)});
	var flatten       : Sequence(EClass) := _coll->flatten();

	var collect_s     : Sequence(EClass) := _coll.clone().oclAsType(EClass); -- shorthand for collect
	var xcollectt     : Sequence(EClass) := _coll->xcollect(clone().oclAsType(EClass));
	var xcollectt_s   : Sequence(EClass) := _coll->clone().oclAsType(EClass); -- shorhand for xcollect
	var xselectt      : Sequence(EClass) := _coll->xselect(true);
	var xselectt_s    : Sequence(EClass) := _coll[true]; -- shorthand for xselect
	var collsell      : Sequence(EClass) := _coll->collectselect(i;res=i.clone().oclAsType(EClass)|true);
	var collsell_s    : Sequence(EClass) := _coll->clone()[EClass]; -- shorhand for collectselect
	
	return null;
}

helper testOrderedSet() {
	var _coll := OrderedSet {object EClass{name:='n'}};
		
	var select        : OrderedSet(EClass) := _coll->select(true);
	var reject        : OrderedSet(EClass) := _coll->reject(true);
	var collect       : Sequence(EClass) := _coll->collect(clone().oclAsType(EClass));
	var collectNested : Sequence(EClass) := _coll->collectNested(clone().oclAsType(EClass));
	var closure       : OrderedSet(EClass) := _coll->closure(oclAsType(EClass));
	var sortedBy      : OrderedSet(EClass) := _coll->sortedBy(name);
	 
	var product       : Set(Tuple(first:EClass,second:EClass)) := _coll->product(Bag{_coll->any(true)});
	var flatten       : Set(EClass) := _coll->flatten();

	var collect_s     : Sequence(EClass) := _coll.clone().oclAsType(EClass); -- shorthand for collect
	var xcollectt     : Sequence(EClass) := _coll->xcollect(clone().oclAsType(EClass));
	var xcollectt_s   : Sequence(EClass) := _coll->clone().oclAsType(EClass); -- shorhand for xcollect
	var xselectt      : OrderedSet(EClass) := _coll->xselect(true);
	var xselectt_s    : OrderedSet(EClass) := _coll[true]; -- shorthand for xselect
	var collsell      : Sequence(EClass) := _coll->collectselect(i;res=i.clone().oclAsType(EClass)|true);
	var collsell_s    : Sequence(EClass) := _coll->clone()[EClass]; -- shorhand for collectselect
	
	return null;
}

helper testSet() {
	var _coll := Set {object EClass{name:='n'}};
		
	var select        : Set(EClass) := _coll->select(true);
	var reject        : Set(EClass) := _coll->reject(true);
	var collect       : Bag(EClass) := _coll->collect(clone().oclAsType(EClass));
	var collectNested : Bag(EClass) := _coll->collectNested(clone().oclAsType(EClass));
	var closure       : Set(EClass) := _coll->closure(oclAsType(EClass));
	var sortedBy      : OrderedSet(EClass) := _coll->sortedBy(name);
	 
	var product       : Set(Tuple(first:EClass,second:EClass)) := _coll->product(Bag{_coll->any(true)});
	var flatten       : Set(EClass) := _coll->flatten();

	var collect_s     : Bag(EClass) := _coll.clone().oclAsType(EClass); -- shorthand for collect
	var xcollectt     : Bag(EClass) := _coll->xcollect(clone().oclAsType(EClass));
	var xcollectt_s   : Bag(EClass) := _coll->clone().oclAsType(EClass); -- shorhand for xcollect
	var xselectt      : Set(EClass) := _coll->xselect(true);
	var xselectt_s    : Set(EClass) := _coll[true]; -- shorthand for xselect
	var collsell      : Bag(EClass) := _coll->collectselect(i;res=i.clone().oclAsType(EClass)|true);
	var collsell_s    : Bag(EClass) := _coll->clone()[EClass]; -- shorhand for collectselect
	
	return null;
}

helper testBag() {
	var _coll := Bag {object EClass{name:='n'}};
		
	var select        : Bag(EClass) := _coll->select(true);
	var reject        : Bag(EClass) := _coll->reject(true);
	var collect       : Bag(EClass) := _coll->collect(clone().oclAsType(EClass));
	var collectNested : Bag(EClass) := _coll->collectNested(clone().oclAsType(EClass));
	var closure       : Set(EClass) := _coll->closure(oclAsType(EClass));
	var sortedBy      : Sequence(EClass) := _coll->sortedBy(name);
	 
	var product       : Set(Tuple(first:EClass,second:EClass)) := _coll->product(Bag{_coll->any(true)});
	var flatten       : Bag(EClass) := _coll->flatten();

	var collect_s     : Bag(EClass) := _coll.clone().oclAsType(EClass); -- shorthand for collect
	var xcollectt     : Bag(EClass) := _coll->xcollect(clone().oclAsType(EClass));
	var xcollectt_s   : Bag(EClass) := _coll->clone().oclAsType(EClass); -- shorhand for xcollect
	var xselectt      : Bag(EClass) := _coll->xselect(true);
	var xselectt_s    : Bag(EClass) := _coll[true]; -- shorthand for xselect
	var collsell      : Bag(EClass) := _coll->collectselect(i;res=i.clone().oclAsType(EClass)|true);
	var collsell_s    : Bag(EClass) := _coll->clone()[EClass]; -- shorhand for collectselect
	
	return null;
}

helper testIterateOne(in c1: Collection(Element), in c2: Collection(Element), in c3: Collection(Element)) {
	var c : Element := c1->selectOne(true);
	assert fatal (c = null);
	c := c2->selectOne(true);
	assert fatal (c = null);
	c := c3->selectOne(true);
	assert fatal (c.oclIsKindOf(EClass));

	c := c1![true]; -- shorthand for selectOne
	assert fatal (c = null);
	c := c2![true]; -- shorthand for selectOne
	assert fatal (c = null);
	c := c3![true]; -- shorthand for selectOne
	assert fatal (c.oclIsKindOf(EClass));

	c := c1->collectselectOne(i;res=i|res.oclIsKindOf(EClass));
	assert fatal (c = null);
	c := c2->collectselectOne(i;res=i|res.oclIsKindOf(EClass));
	assert fatal (c = null);
	c := c3->collectselectOne(i;res=i|res.oclIsKindOf(EClass));
	assert fatal (c.oclIsKindOf(EClass));

	c := c1![EClass]; -- shorhand for collectselectOne
	assert fatal (c = null);
	c := c2![EClass]; -- shorhand for collectselectOne
	assert fatal (c = null);
	c := c3![EClass]; -- shorhand for collectselectOne
	assert fatal (c.oclIsKindOf(EClass));
	
	return null;
}
