modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";
transformation bug432786;

main() {
	var p1 : EClassifier = resolveoneIn(m1);
	assert fatal (p1 = null);
	  
	var obj = map m1();
	var p2 : ENamedElement = resolveoneIn(m1);  
	assert fatal (p2 = obj);

	do
	{
		var myEClass = object EClass{};
		var t1 : Tuple(x:EClass,y:EPackage) = myEClass.map foo();
		assert fatal (t1.x.name = 'foo');
		var t2 : Tuple(x:EClass,y:EPackage) = myEClass.map foo();
		assert fatal (t2 = t1);
		
		var t3 : Tuple(x:EClass,y:EPackage) = myEClass.resolveoneIn(EClass::foo);
		assert fatal (t3 = t1);
		var t4 : Tuple(x:EClass,y:ENamedElement) = myEClass.resolveoneIn(EClass::foo);
		assert fatal (t4 = t1);
		var t5 : Tuple(x:EModelElement,y:ENamedElement) = myEClass.resolveoneIn(EClass::foo, Tuple(x:EClassifier,y:EPackage));
		assert fatal (t5 = t1);

		var t6 : EClass = t1.invresolveoneIn(EClass::foo);
		assert fatal (t6 = myEClass);
		var t7 : EModelElement = t1.invresolveoneIn(EClass::foo, EClassifier);
		assert fatal (t7 = myEClass);
	};

	do
	{
		var myEClass = object EClass{};
		var t1 : Tuple(x:EClass,y:EPackage) = myEClass.map foo1();
		assert fatal (t1.x.name = 'foo');
		var t2 : Tuple(x:EClass,y:EPackage) = myEClass.map foo1();
		assert fatal (t2 = t1);
		
		var t3 : Tuple(x:EClass,y:EPackage) = myEClass.resolveoneIn(EClass::foo1);
		assert fatal (t3 = t1);
		var t4 : Tuple(x:EClass,y:ENamedElement) = myEClass.resolveoneIn(EClass::foo1);
		assert fatal (t4 = t1);
		var t5 : Tuple(x:EModelElement,y:ENamedElement) = myEClass.resolveoneIn(EClass::foo1, Tuple(x:EClassifier,y:EPackage));
		assert fatal (t5 = t1);

		var t6 : EClass = t1.invresolveoneIn(EClass::foo1);
		assert fatal (t6 = myEClass);
		var t7 : EModelElement = t1.invresolveoneIn(EClass::foo1, EClassifier);
		assert fatal (t7 = myEClass);
	};
}

mapping m1() : EClassifier {
	init {
		result := object EClass{};	
	}
}

mapping EClass :: foo() : x : EClass, y : EPackage {
	x.name := 'foo'
}

mapping EClass :: foo1() : Tuple(x : EClass, y : EPackage) {
	init {
		result := Tuple{x=object EClass{},y=object EPackage{}}; 	
	}
	result.x.name := 'foo'
}
