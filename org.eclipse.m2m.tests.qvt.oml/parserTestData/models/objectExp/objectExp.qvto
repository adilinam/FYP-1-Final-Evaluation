modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation objectExp(in inModel : ECORE, out outModel : ECORE);

main() {
	var root := object EPackage { name := 'result' };
	 
	var eClass : EClass := null;

	object eClass: EClass@outModel {
		name := 'create';
	};

	assert fatal (eClass <> null);	
	root.eClassifiers += eClass;

	object eClass : { 
		name := eClass.name + '_update';
	};

	root.eClassifiers += eClass; -- nothing added, it is there already
	
	eClass:= null;	
	object eClass: EClass@outModel {
		name := 'newlyCreated';
	};
	root.eClassifiers += eClass;
	
	----------------------------	
	root.map theSameInMapping(root);
	root.map nestedObject();	
	root.map inIterators();
	root.map nestedCreate();
}

mapping inout EPackage::theSameInMapping(inout root : EPackage) : EClass {
	init {
		var eClass : EClass := null;
	
		object eClass: EClass@outModel {
			name := 'theSameInMapping.create';
		};
	
		assert fatal (eClass <> null);	
		root.eClassifiers += eClass;
	
		object eClass: {
			name := eClass.name + '_update';
		};
	
		root.eClassifiers += eClass; -- nothing added, it is there already
		
		eClass:= null;	
		object eClass: EClass@outModel {
			name := 'theSameInMapping.newlyCreated';
		};
		root.eClassifiers += eClass;
		
		result := eClass;
		self.eClassifiers += result;
	}
}

mapping inout EPackage::nestedObject() : EClass {
	init {
		var c : EClass := null;
		var o : EOperation := null;		
		var p : EParameter := null;
		var a : EAnnotation := null;		
		result := object c : EClass { 
			name := 'c1';
			eOperations += object o : EOperation {
				name := 'o1';				
				eParameters += object p : EParameter {
					name := 'p1';
					eAnnotations += object a : EAnnotation {
						source := 'src1';
					}
				}
			}
		};		
	}
	
	end {
		assert fatal (c.name = 'c1');
		assert fatal (o.name = 'o1');
		assert fatal (p.name = 'p1');
		assert fatal (a.source = 'src1');
		object c : EClass { 
			name := 'c2';
			eOperations += object o : EOperation {
				name := 'o2';
				eParameters += object p : EParameter {
					name := 'p2';
					eAnnotations += object a : EAnnotation {
						source := 'src2';
					}
				}
			}
		};
		
		self.eClassifiers += c;
	}
}

mapping inout EPackage::inIterators() : EClass {
	init {
		-- TODO - use xcollect here as soon as available
		Bag { object result : EClass {} }->collect(c | object c: EClass { name :='iter'} ); 
	}
	end {
		self.eClassifiers += result;
	}
}

mapping inout EPackage::nestedCreate() : EClass {
	init {
		var a : EAnnotation := null;		
		result := object EClass { 
			name := 'new_c1';
			eOperations += object EOperation {
				name := 'new_o1';				
				eParameters += object EParameter {
					name := 'new_p1';
					eAnnotations += object a :  { -- test var with this one
						source := 'new_src1';
					}
				}
			}
		};		
	}
	
	end {
		assert fatal (a.source = 'new_src1');
		
		self.eClassifiers += result;
	}
}