import org.bar.Foo;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
	
transformation stdlibString(in m : ECORE, out x : ECORE);
 
main() {
	var list := newList(OrderedSet { 'a', 'b' } );
	assert fatal ('<a,b>' = list->joinfields(',', '<', '>'));
	-- test add(...)
	list->add('c');
	assert fatal ('c' = list->genericListElementAt(list->size()));
	
	-- test append(...)	
	list := list->append('d');	
	assert fatal ('d' = list->genericListElementAt(list->size()));
	assert fatal (list->size() = 4);
		
	-- test prepend(...)		
	list := list->prepend('0');
	assert fatal ('0' = list->genericListElementAt(1));	

	-- test insertAt(...)
	-- 1 - based
	list->insertAt('1', 1);	
	assert fatal ('1' = list->genericListElementAt(1));
	
	var size : Integer := list->size();
	list->insertAt('n', size);
	assert fatal ('n' = list->genericListElementAt(size));
	

	-- invalid not allowed in List 
	var invalidValue := null.oclAsType(String).toUpper();	
	assert fatal (invalidValue.oclIsInvalid());
	
	var listWithInvalidTest : List(String) := newList(Set { });
	listWithInvalidTest->add(invalidValue);
	assert fatal(listWithInvalidTest->isEmpty());

	listWithInvalidTest->append(invalidValue);
	assert fatal(listWithInvalidTest->isEmpty());
	
	listWithInvalidTest->prepend(invalidValue);
	assert fatal(listWithInvalidTest->isEmpty());

	listWithInvalidTest->insertAt(invalidValue, 0);
	assert fatal(listWithInvalidTest->isEmpty());	
}
