import org.bar.Foo;
-- test the deprecated 'import library'
import library org.eclipse.m2m.tests.qvt.oml.bbox.SimpleJavaLibrary;

modeltype TESTQVT "strict" uses testqvt('http://www.eclipse.org/m2m/qvt/oml/testqvt');  
modeltype UML uses 'http://www.eclipse.org/qvt/1.0.0/Operational/examples/simpleuml';
modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype QVTO "strict" uses qvtoperational('http://www.eclipse.org/QVT/1.0.0/Operational');


transformation blackboxlib_annotation_java(in source : ECORE, out target: ECORE);

main() {
	-- test stateful operation (counter state per module instance)
	var strCounter := 'c1'.getStrCounterX();
	assert fatal (strCounter = 0);
	strCounter := 'c1'.incStrCounterX();
	assert fatal (strCounter = 1);	
	strCounter := 'c1'.getStrCounterX();
	assert fatal (strCounter = 1);	
	assert fatal ('c1'.incStrCounterX() = 2);
	--
	
	-- test the simplified library definition
	assert fatal (echoFromSimpleJavaLibrary('Hello') = 'Hello');

	var r : Sequence(OclAny);
	r := primitiveTypeArgumentsHelper('String', 10, 1.5, true);
	checkPrimitiveTypeArgResult(r);
		
	checkPrimitiveTypeArgResult(
		primitiveTypeArgumentsQuery('String', 10, 1.5, true));	

	checkPrimitiveTypeArgResult(
		primitiveTypeArgumentsOperation('String', 10, 1.5, true));
	 
	checkPrimitiveTypeArgResult(
		primitiveTypeArgumentsDefault('String', 10, 1.5, true));

	var _self := object EAnnotation {};
	r := _self.primitiveTypeArgumentsHelperContextual('String', 10, 1.5, true);
	checkPrimitiveTypeArgResult(r);
		
	checkPrimitiveTypeArgResult(
		_self.primitiveTypeArgumentsQueryContextual('String', 10, 1.5, true));	

	checkPrimitiveTypeArgResult(
		_self.primitiveTypeArgumentsOperationContextual('String', 10, 1.5, true));
		
		
	-- test arguments of invalid and java operation binary compatibility
	assert fatal (testEchoArgument('aStr') = 'aStr');
	assert fatal (testEchoArgument(null) = null);
	assert fatal (testEchoArgument(invalid) = null);
	
	-- test a static java operation in java module class

	assert fatal (staticTestEchoArgument('aStr') = 'aStr');

	var suffixedName := object EParameter { name := 'foo' }.testContextualSuffixedName('Suffix');
	assert fatal (suffixedName = 'fooSuffix');
	
	-- test collection type args
	var set : Set(Sequence(String)) := Sequence{ 's1' }->wrapInSet();
	assert fatal (set->flatten()->exists(i | i = 's1'));
	var realsInSet : Set(Collection(OclAny)) := Sequence{ 2.5, 3.5 }->commonCollectionInSet();
	assert fatal (realsInSet->flatten()->sum() = 6);
		
	var intsInSet : Set(Collection(OclAny)) := Set{ 1, 2 }->commonCollectionInSet();
	assert fatal (intsInSet->flatten()->sum() = 3);
	 
	
	-- complex type
	var complex : Set(OrderedSet(Sequence(Bag(String)))) := 
		testComplexTypeCopy(Set{OrderedSet{Sequence{Bag{'String'}}}});	
	assert fatal (complex->flatten()->exists(i | i='String'));


	-- test resolve used model types
	var umlModelParam := object UML::Model{};
	var umlModel : UML::Model := testUsedSimpleUMLModelPackage(umlModelParam);
	assert fatal (umlModel = umlModelParam);
	
	-- test void return type
	var v : OclVoid := noReturnType('');
	
	-- test a generic operation on collection types	
	var sourceOfStrings := Set{'aString'}->including(null);
	assert fatal (sourceOfStrings->size() = 2);
	var definedStringsCount := sourceOfStrings->countIgnoreUndefined();
	assert fatal (definedStringsCount = 1); 

	var sourceOfIntegers := Set{10, 20}->including(null);
	assert fatal (sourceOfIntegers->size() = 3);
	var i := sourceOfIntegers->countIgnoreUndefined();
	assert fatal (i = 2);
	
	-- test enumeration
	var kind := QVTO::expressions::DirectionKind::_inout;
	var literalName := getEnumLiteralName(kind);
	assert fatal (literalName = 'inout');
	
	-- test BigInteger	 
	var bigInt := addBigInteger(createBigInteger('10'), 23);
	assert fatal (bigInt = createBigInteger('33'));
	assert fatal (33 = createBigInteger('33'));
	var bigInt2 : Integer := createBigInteger('50');
	assert fatal (bigInt2 = createBigInteger('50'));

	var sharedBigInt := createBigInteger('10');  
	assert fatal (sharedBigInt.theSameJavaBigIntegerInstance(sharedBigInt));	
	
	-- test BigDecimal
	var bigDec := addBigDecimal(createBigDecimal('10.5'), 23.0);
	assert fatal (bigDec = createBigDecimal('33.5'));
	assert fatal (33.5 = createBigDecimal('33.5'));
	var bigDec2 : Real := createBigDecimal('50.5');
	assert fatal (bigDec2 = createBigDecimal('50.5'));
	
	assert fatal (sumLowerPrecisions(10, 10, 10) = 30);
	assert fatal (sumLowerPrecisionDoubles(10.5, 10.5) = 21);

	-- TODO: raise MDT OCL bug, a storage exception is raised	
	-- var t : Tuple ( number : Integer ) := Tuple { number = createBigInteger('100') };
	-- assert fatal (t.number = 100);

-- test contextual operations on primitive type context	
	assert fatal ((10).nonObjectIntContextualEcho() = 10);
	assert fatal ((10).nonObjectDoubleContextualEcho() = 10);
	assert fatal ((10.5).nonObjectDoubleContextualEcho() = 10.5);	
		
	assert fatal (true.nonObjectBoolContextualEcho() = true);	
	assert fatal (false.nonObjectBoolContextualEcho() = false);
	
	assert fatal ('abc'.stringContextualEcho() = 'abc');
	
	assert fatal ((10).intContextualEcho() = 10);
	assert fatal ((10).doubleContextualEcho() = 10);
	assert fatal ((10.5).doubleContextualEcho() = 10.5);	
		
	assert fatal (true.boolContextualEcho() = true);	
	assert fatal (false.boolContextualEcho() = false);

-- testing object properties of big types
	var numbers : Numbers := object Numbers {};
	assert fatal (numbers.bigInteger100 = createBigInteger('100'));
	var big150 := createBigInteger('150');
	numbers.bigInteger100 := big150;
	assert fatal (numbers.bigInteger100 = big150);
	assert fatal (numbers.bigInteger100.theSameJavaBigIntegerInstance(big150));
	numbers.bigInteger100 := 1000;
	assert fatal (numbers.bigInteger100 = 1000);	
--
	assert fatal (numbers.bigDecimal100 = createBigDecimal('100'));
	var bigDec150 := createBigDecimal('150');
	numbers.bigDecimal100 := bigDec150;
	assert fatal (numbers.bigDecimal100 = bigDec150);
	numbers.bigDecimal100 := 1000;
	assert fatal (numbers.bigDecimal100 = 1000);	
--

--  test data type not mapped by MDT OCL 
	var date : EDate := createDate('2008-10-31');
	assert fatal (date.before(createDate('2008-11-01')));

--  test data type not mapped by MDT OCL from SimpleJavaLibrary
	var date2 : EDate := simpleCreateDate('2008-10-31');
	assert fatal (date2.isBefore(simpleCreateDate('2008-11-01')));

-- test generic collection type operations
	var anyInt : Integer := Set { 1 }->anyElement();
	assert fatal (anyInt = 1);
	
	var echoedSet : Set(Integer) := Bag { 10 }->echoAsSet();
	assert fatal (echoedSet->size() = 1);
	assert fatal (echoedSet->exists(intElement | intElement = 10));
	
	var shrinkedCollection : Collection(String) := Set { 1 }->shrinkAnotherCollectionToMySize(Sequence { 'a', 'b' });
	assert fatal (shrinkedCollection->size() = 1 and shrinkedCollection->includes('a'));	

	////////////////////////////////////////////
	// test library instance state management
	assert fatal (getLibState().oclIsUndefined());	
	setLibState("1");
	assert fatal (getLibState() = "1");
	setLibState("2");	
	assert fatal (getLibState() = "2");
	// test contextual operation with access to the library instance
	assert fatal ("_End".appendToLibState() = "2_End");
	assert fatal (getLibState() = "2_End");
	
	// Dictionary type mapping test 
	var dict : Dict(String, String) := Dict { 1 = "1", 2 = "2" };
	var str2strDict : Dict(String, String) = dict->toString2StringDict();
	assert fatal (str2strDict->get("1") = "1");
	assert fatal (str2strDict->get("2") = "2");
	
}

helper checkPrimitiveTypeArgResult(r : Sequence(OclAny)) : OclVoid {
	assert fatal (r->at(1) = 'String');
	assert fatal (r->at(2) = 10);
	assert fatal (r->at(3) = 1.5);
	assert fatal (r->at(4) = true);
	
	assert fatal (r->size() = 4);	 		
}
