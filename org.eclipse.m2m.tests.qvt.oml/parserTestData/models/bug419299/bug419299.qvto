modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation bug419299;


exception ExcA {
}

exception ExcB {
}

exception ExcExtAB extends ExcA, ExcB {
}

exception ExcD {
}

main() {
	// 'AssertionFailed' exception
	var exLog1 = '';
	try {
		assert fatal (false) with log("NPE");
	} 
	except (ex:AssertionFailed) {
		exLog1 := ex.getArgument();
	};
	assert fatal (exLog1 = "NPE");
	
	// 'AssertionFailed' exception
	exLog1 := '';
	try {
		assert fatal (false) with log("NPE");
	} 
	except (ex:Exception) {
		exLog1 := ex.getArgument();
	};
	assert fatal (exLog1 = "NPE");
	
	// 'AssertionFailed' exception
	exLog1 := '';
	try {
		raise "NPE";
	} 
	except (ex:AssertionFailed) {
		exLog1 := "assertion " + ex.getArgument();
	}
	except (ex:Exception) {
		exLog1 := ex.getArgument();
	};
	assert fatal (exLog1 = "NPE");

	
	// 'break' inside a 'try' block
	var test1 = false;
	var i=0;
	while (i<100) {
		i := i+1;
		try {
			break;
		}
		except (){
			i :=-1;
		};
	};
	test1 := (i=1);


	// 'break' inside nested 'try' blocks
	var test2 = false;
	i:=0;
	try {
		while (i<100) {
			i := i+1;
			try {
				try {
					break;
				}
				except (){
					i :=-1;
				};
			}
			except (){
				i :=-1;
			};
		};
		test2 := (i=1);
	}
	except(){
	};


	// catch an exception raised in a mapping
	var test3 = false;
	try {
		object EClass{}.xmap test3();
	}
	except(exc3:Exception){
		test3 := (exc3.getArgument() = "out");
	};



	// catch an exception raised in a helper called from a mapping
	var test4 = false;
	try {
		object EClass{}.xmap test4();
	}
	except(exc4:Exception){
		test4 := (exc4.getArgument() = "out");
	};


	// 'except' inside a 'while' block
	var test5 = false;
	i:=0;
	try {
		while (i<100) {
			i := i+1;
			raise Exception;
			i :=-1;
			break;
		}
	}
	except (){
		test5 := (i=1);
	};


	// nested try blocks - 1
	var test6 = false;
	var trace = "";
	try {
		try {
			raise ExcExtAB;
			trace := trace + "not raised."; 
		}	
		except (ExcA){
			trace := trace + "gotA."; 
		};
		trace := trace + "outA."; 
	}	
	except (ExcExtAB){
		trace := trace + "gotExtAB."; 
	};
	test6 := (trace = "gotA.outA.");


	// nested try blocks - 2
	var test7 = false;
	trace := "";
	try {
		try {
			raise ExcA;
			trace := trace + "not raised."; 
		}	
		except (ExcExtAB){
			trace := trace + "gotExtAB."; 
		};
		trace := trace + "outExtAB."; 
	}	
	except (ExcA){
		trace := trace + "gotA."; 
	};
	test7 := (trace = "gotA.");


	// nested try blocks - 3
	var test8 = false;
	trace := "";
	try {
		try {
			raise ExcExtAB;
			trace := trace + "not raised."; 
		}	
		except (ExcD){
			trace := trace + "gotD."; 
		};
		trace := trace + "outD."; 
	}	
	except (ExcA){
		trace := trace + "gotA."; 
	}
	except (ExcB){
		trace := trace + "gotB."; 
	};
	test8 := (trace = "gotA.");


	// exception var - 1
	var test9 = false;
	trace := "";
	try {
		raise ExcExtAB;
		trace := trace + "not raised."; 
	}	
	except (exc9 : ExcA){
		if (exc9.oclIsKindOf(ExcA))
			trace := trace + "gotA."; 
		if (exc9.oclIsKindOf(ExcA))
			trace := trace + "gotB."; 
		if (exc9.oclIsKindOf(ExcExtAB))
			trace := trace + "gotExtAB."; 
		if (exc9.oclIsKindOf(Exception))
			trace := trace + "gotException."; 
	};
	test9 := (trace = "gotA.gotB.gotExtAB.gotException.");

	// exception var - 2
	var test10 = false;
	trace := "";
	try {
		raise "message";
		trace := trace + "not raised."; 
	}	
	except (exc10 : ExcA, Exception){
		if (exc10.oclIsKindOf(ExcA))
			trace := trace + "gotA."; 
		if (exc10.oclIsKindOf(ExcA))
			trace := trace + "gotB."; 
		if (exc10.oclIsKindOf(ExcExtAB))
			trace := trace + "gotExtAB."; 
		if (exc10.oclIsKindOf(Exception))
			trace := trace + "gotException."; 
	};
	test10 := (trace = "gotException.");

	// catch all
	var test11 = false;
	trace := "";
	try {
		raise "message";
		trace := trace + "not raised."; 
	}	
	except (){
		trace := trace + "gotException."; 
	};
	test11 := (trace = "gotException.");

	assert fatal (test1);
	assert fatal (test2);
	assert fatal (test3);
	assert fatal (test4);
	assert fatal (test5);
	assert fatal (test6);
	assert fatal (test7);
	assert fatal (test8);
	assert fatal (test9);
	assert fatal (test10);
	assert fatal (test11);
}


mapping inout EClass::test3() {
	raise "out";
}

helper helper4() : String {
	raise "out";
}

mapping inout EClass::test4() {
	helper4();
}



