modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype QVT uses qvtoperational('http://www.eclipse.org/QVT/1.0.0/Operational');
	

transformation stdlibelement(in m : ECORE, out x : ECORE, out y : ECORE);
 
main() {	
	checkElementTypeHierarchy();
	
	var a:= object EPackage@x {
		name := 'a'
	};

	var b:= object EPackage@y {
		name := 'b';
	};
	
	x.removeElement(a);
	assert fatal (not x.objects()[EPackage]->exists(i | i = a));
	
	a.eSubpackages += b;
	var subPackOfA := object EPackage { name := 'subpackOfA' };	
	a.eSubpackages += subPackOfA;

	assert fatal (a.subobjects()->includes(b));
	assert fatal (a.subobjectsOfType(EPackage)->includes(b));
	assert fatal (a.subobjectsOfKind(EPackage)->includes(b));

	assert fatal (a.allSubobjects()->size() = 2);
	assert fatal (a.allSubobjectsOfType(EPackage)->size() = 2);
	assert fatal (a.subobjectsOfKind(EModelElement)->size() = 2);	
	assert fatal (a.subobjectsOfKind(EAttribute)->isEmpty());
	
	-- take all subobjects
	var allsubObjects := a.allSubobjects(); 
	assert fatal (allsubObjects->includesAll(OrderedSet { b, subPackOfA }) and allsubObjects->size() =2);
	
	assert fatal (b.container() = a);
	assert fatal (a.container() = null);	
	assert fatal (b.metaClassName() = 'EPackage');
	
	assert fatal (y.objects()->isEmpty()); 
	assert fatal (x.objects()->isEmpty());

	-- put clone contents into the first available extent
	var aCopy := a.deepclone();
	var aClone := a.clone(); 
	
	assert fatal (y.objects()->isEmpty());
	assert fatal (x.objects()->notEmpty());
	
	var objectsOfType : Set(Element):= x.objectsOfType(EPackage);
	assert fatal (objectsOfType->notEmpty());
}


helper checkElementTypeHierarchy() : OclVoid {
	
	var model : ECORE := y;
	--assert fatal (m.oclIsKindOf(Model)); -- requires the value of Model instance and not ModelParameterExtent object
	
	var op := object EPackage{};
	var opAsElement := op.oclAsType(Element);
	assert fatal (not opAsElement.oclIsUndefined() and opAsElement = op);
	
	assert fatal (op.oclIsKindOf(Stdlib::Element));
	assert fatal (not op.oclIsTypeOf(Stdlib::Element));
	assert fatal (not 'aString'.oclIsKindOf(Stdlib::Element));
	x.removeElement(op);
	return null;
}