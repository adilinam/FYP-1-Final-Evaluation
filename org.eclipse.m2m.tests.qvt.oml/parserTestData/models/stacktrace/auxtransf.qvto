modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
	 
transformation auxtransf(in inModel : ecore, out outModel : ecore);

query causeStackOverFlow() : OclAny {
	causeStackOverFlow(); -- line 7: causing stack overflow
}

mapping EClassifier::mapCreateInstaceFailureFromAux() : EClassifier@outModel {
	init {  
		result := null; -- cheat the compiler like we have assigned a concrete result;
	}
}

mapping EClassifier::mapWithAssertionFailedFromAux() : EClassifier@outModel {
	init {
		assert fatal (100 < 0) with log('Testing fatal assert in mapWithAssertionFailedFromAux()');
	}
}

query populateLogData() :OclAny {
	log('message');
	log('ignored message') when false;
	log('confirmed message') when true;
	
	log('message with data', 2.344545);
	log('confirmed message with data', 2.344545) when true;	
	log('ignored message with data', 2.344545) when false;	
	log('message with data and level', 2.344545, 4);
	
	return null	
}
