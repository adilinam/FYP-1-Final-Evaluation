transformation resolveall;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';

mapping main(in model: ecore::EPackage): ecore::EPackage {
	init {
		var cl := model.allInstances(ecore::EPackage)->including(model).toEClass();
	}
    	name := 'all';
    	eAnnotations += object ecore::EAnnotation {
    		_references += selectionSort(resolveIn(main, ecore::ENamedElement)->union(resolveIn(ecore::EPackage::toEClass, ecore::ENamedElement))
    			->union(resolveIn(ecore::EPackage::toAttribute, ecore::ENamedElement))->asOrderedSet())->collect(oclAsType(EObject));
    		source := 'resolveAll(ecore::EObject)';
    	};
    	eAnnotations += object ecore::EAnnotation {
    		_references += selectionSort(resolveIn(ecore::EPackage::toAttribute, ecore::EAttribute)->asOrderedSet())->collect(oclAsType(EObject));
    		source := 'resolveAllByRule(toAttribute, ecore::EAttribute)';
    	};
    	eClassifiers += cl;
}

mapping ecore::EPackage::toEClass() : ecore::EClass {
	name := self.name;
	eStructuralFeatures += self.eSubpackages.toAttribute();
}

mapping ecore::EPackage::toAttribute() : ecore::EAttribute {
	name := self.name;
}

query ecore::ENamedElement::hash() : Integer {
	return if self.oclIsKindOf(ecore::EClass) then
	  self.name.substring(2, 2).toInt() + 100
	 else 
	 	self.name.substring(2, 2).toInt()
	 endif;
}

query String::toInt() : Integer {
	return if self = '1' then
	  1
	else if self = '2' then
	  2
	else if self = '3' then
	  3
	else 0
	endif endif endif;	
}

query min(in ar: OrderedSet(ecore::ENamedElement)): ecore::ENamedElement {
	return ar->iterate(a; min : ecore::ENamedElement = ar->at(1) | 
		if a.hash() < min.hash() then a else min endif); 	
}
	
query selectionSort(in ar: OrderedSet(ecore::ENamedElement)): OrderedSet(ecore::ENamedElement) {
	return if ar->size() = 0 then OrderedSet{} 
	else
		let 
			min = min(ar), 
			rest = ar->excluding(min)->asOrderedSet(),
			res = min->asSequence()->union(selectionSort(rest)->asSequence())->asOrderedSet() 
		in 
			res
	endif;
}