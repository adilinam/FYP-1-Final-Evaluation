modeltype MODEL uses 'http://www.example.org/model';modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';transformation bug386115(in input : MODEL, in model: ECORE);main() {	var root := input.rootObjects()![Container];	assert fatal (root.contains->size() = 3);		var feature := EReference.allInstances()->any(name = 'contains');		do {		var dynCall1 := root.oclAsType(EObject).eGet(feature);		assert fatal (not dynCall1.oclAsType(Collection(EObject))->size().oclIsInvalid());		assert fatal (not dynCall1.oclAsType(Sequence(EObject))->size().oclIsInvalid());		assert fatal (dynCall1.oclAsType(Collection(EClass))->size().oclIsInvalid());		assert fatal (dynCall1.oclAsType(Sequence(EClass))->size().oclIsInvalid());	};			var dynCall := root.oclAsType(EObject).eGet(feature).oclAsType(Collection(OclAny));	assert fatal (dynCall->size() = 3);	assert fatal (dynCall->asSequence()->size() = 3);		var contained := root.contains->first();		var singleFeature := EReference.allInstances()->any(name = 'single');	assert fatal (contained.single = contained.oclAsType(EObject).eGet(singleFeature));		var multiFeature := EReference.allInstances()->any(name = 'multi');	assert fatal (contained.oclAsType(EObject).eGet(multiFeature).oclAsType(Collection(OclAny))->size() = 2);	assert fatal (contained.multi = contained.oclAsType(EObject).eGet(multiFeature).oclAsType(Collection(Contained))->asOrderedSet());}