modeltype ECORE "strict" uses "http://www.eclipse.org/emf/2002/Ecore";
	
transformation bug467600_List();

main() {

	// test List::union(List)
	//
	do {
		var cc1 : List(OclAny) := List{1}->union(List{""});
		assert fatal (cc1->size() = 2);
		assert fatal (cc1->includes(1));
		
		var cc2 : List(Integer) := List{1}->union(List{2});
		assert fatal (cc2->size() = 2);
		assert fatal (cc2->includes(2));
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : List(EClassifier) := List{object EClass{}}->union(List{elem1});   
		assert fatal (cc3->size() = 2);
		assert fatal (cc3->includes(elem1));
	
		var cc31 : List(EClassifier) := List{elem1}->union(List{object EClass{}});   
		assert fatal (cc31->size() = 2);
		assert fatal (cc31->includes(elem1));
	
		var cc32 : List(EClass) := List{}->union(List{object EClass{}});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : List(OclVoid) := List{}->union(List{});   
		assert fatal (cc33->size() = 0);
	
		var cc34 : List(EClass) := List{object EClass{}}->union(List{});   
		assert fatal (cc34->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : List(EClass) := List{object EClass{}}->union(List{elem2});   
		assert fatal (cc4->size() = 2);
		assert fatal (cc4->includes(elem2));
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : List(Element) := List{object EClass{}}->union(List{elem3});   
		assert fatal (cc5->size() = 2);
		assert fatal (cc5->includes(elem3));

		var cc6 : List(EClass) := List{object EClass{}}->union(List{null});   
		assert fatal (cc6->size() = 2);
		assert fatal (cc6->includes(null));

		var cc7 : List(EClass) := List{object EClass{}}->union(List{invalid});   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : List(OclAny) := List{1}->union(List{elem3});
		assert fatal (cc8->size() = 2);
		assert fatal (cc8->includes(elem3));
	};
	
	// test List::append(o) and List::indexOf(o)
	//
	do {
		var cc1 : List(OclAny) := List{1}->append("");
		assert fatal (cc1->indexOf("") = 2);
		
		var cc2 : List(Integer) := List{1}->append(2);
		assert fatal (cc2->indexOf(1) = 1);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : List(EClassifier) := List{object EClass{}}->append(elem1);   
		assert fatal (cc3->indexOf(elem1) = 2);
	
		var cc31 : List(EClassifier) := List{elem1}->append(object EClass{});   
		assert fatal (cc31->indexOf(elem1) = 1);
	
		var cc32 : List(EClass) := List{}->append(object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : List(OclVoid) := List{}->append(null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : List(EClass) := List{elem2}->append(elem2);
		assert fatal (cc4->size() = 2);   
		assert fatal (cc4->indexOf(elem2) = 1);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : List(Element) := List{object EClass{}}->append(elem3);   
		assert fatal (cc5->indexOf(elem3) = 2);

		var cc6 : List(EClass) := List{object EClass{}}->append(null);   
		assert fatal (cc6->indexOf(null) = 2);

		var cc7 : List(EClass) := List{object EClass{}}->append(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : List(OclAny) := List{1}->append(elem3);
		assert fatal (cc8->indexOf(elem3) = 2);
	};
	
	// test List::prepend(o) and List::indexOf(o)
	//
	do {
		var cc1 : List(OclAny) := List{1}->prepend("");
		assert fatal (cc1->indexOf("") = 1);
		
		var cc2 : List(Integer) := List{1}->prepend(2);
		assert fatal (cc2->indexOf(1) = 2);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : List(EClassifier) := List{object EClass{}}->prepend(elem1);   
		assert fatal (cc3->indexOf(elem1) = 1);
	
		var cc31 : List(EClassifier) := List{elem1}->prepend(object EClass{});   
		assert fatal (cc31->indexOf(elem1) = 2);
	
		var cc32 : List(EClass) := List{}->prepend(object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : List(OclVoid) := List{}->prepend(null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : List(EClass) := List{elem2}->prepend(elem2);
		assert fatal (cc4->size() = 2);   
		assert fatal (cc4->indexOf(elem2) = 1);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : List(Element) := List{object EClass{}}->prepend(elem3);   
		assert fatal (cc5->indexOf(elem3) = 1);

		var cc6 : List(EClass) := List{object EClass{}}->prepend(null);   
		assert fatal (cc6->indexOf(null) = 1);

		var cc7 : List(EClass) := List{object EClass{}}->prepend(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : List(OclAny) := List{1}->prepend(elem3);
		assert fatal (cc8->indexOf(elem3) = 1);
	};
	
	// test List::insertAt(o) and List::indexOf(o)
	//
	do {
		var cc1 : List(OclAny) := List{1}->insertAt(1, "");
		assert fatal (cc1->indexOf("") = 1);
		
		var cc2 : List(Integer) := List{1}->insertAt(2, 2);
		assert fatal (cc2->indexOf(1) = 1);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : List(EClassifier) := List{object EClass{}}->insertAt(1, elem1);   
		assert fatal (cc3->indexOf(elem1) = 1);
	
		var cc31 : List(EClassifier) := List{elem1}->insertAt(2, object EClass{});   
		assert fatal (cc31->indexOf(elem1) = 1);
	
		var cc32 : List(EClass) := List{}->insertAt(1, object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : List(OclVoid) := List{}->insertAt(1, null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : List(EClass) := List{elem2}->insertAt(2, elem2);
		assert fatal (cc4->size() = 2);   
		assert fatal (cc4->indexOf(elem2) = 1);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : List(Element) := List{object EClass{}}->insertAt(1, elem3);   
		assert fatal (cc5->indexOf(elem3) = 1);

		var cc6 : List(EClass) := List{object EClass{}}->insertAt(2, null);   
		assert fatal (cc6->indexOf(null) = 2);

		var cc7 : List(EClass) := List{object EClass{}}->insertAt(1, invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : List(OclAny) := List{1}->insertAt(2, elem3);
		assert fatal (cc8->indexOf(elem3) = 2);
	};
	
	// test List::including(o)
	//
	do {
		var cc1 : List(OclAny) := List{1}->including("");
		assert fatal (cc1->size() = 2);
		assert fatal (cc1->includes(1));
		
		var cc2 : List(Integer) := List{1}->including(2);
		assert fatal (cc2->size() = 2);
		assert fatal (cc2->includes(2));
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : List(EClassifier) := List{object EClass{}}->including(elem1);   
		assert fatal (cc3->size() = 2);
		assert fatal (cc3->includes(elem1));
	
		var cc31 : List(EClassifier) := List{elem1}->including(object EClass{});   
		assert fatal (cc31->size() = 2);
		assert fatal (cc31->includes(elem1));
	
		var cc32 : List(EClass) := List{}->including(object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : List(OclVoid) := List{}->including(null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : List(EClass) := List{object EClass{}}->including(elem2);   
		assert fatal (cc4->size() = 2);
		assert fatal (cc4->includes(elem2));
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : List(Element) := List{object EClass{}}->including(elem3);   
		assert fatal (cc5->size() = 2);
		assert fatal (cc5->includes(elem3));

		var cc6 : List(EClass) := List{object EClass{}}->including(null);   
		assert fatal (cc6->size() = 2);
		assert fatal (cc6->includes(null));

		var cc7 : List(EClass) := List{object EClass{}}->including(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : List(OclAny) := List{1}->including(elem3);
		assert fatal (cc8->size() = 2);
		assert fatal (cc8->includes(elem3));
	};
	
	// test List::excluding(o)
	//
	do {
		var cc1 : List(Integer) := List{1}->excluding("");
		assert fatal (cc1->size() = 1);
		assert fatal (cc1->includes(1));
		
		var cc2 : List(Integer) := List{1}->excluding(1);
		assert fatal (cc2->size() = 0);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : List(EClass) := List{object EClass{}}->excluding(elem1);   
		assert fatal (cc3->size() = 1);
	
		var cc31 : List(EClassifier) := List{elem1}->excluding(object EClass{});   
		assert fatal (cc31->size() = 1);
		assert fatal (cc31->includes(elem1));
	
		var cc32 : List(OclVoid) := List{}->excluding(object EClass{});   
		assert fatal (cc32->size() = 0);
	
		var cc33 : List(OclVoid) := List{}->excluding(null);   
		assert fatal (cc33->size() = 0);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : List(EClass) := List{elem2}->excluding(elem2);   
		assert fatal (cc4->size() = 0);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : List(EPackage) := List{elem3}->excluding(object EClass{});   
		assert fatal (cc5->size() = 1);
		assert fatal (cc5->includes(elem3));

		var cc6 : List(EClass) := List{object EClass{}}->excluding(null);   
		assert fatal (cc6->size() = 1);

		var cc7 : List(EClass) := List{object EClass{}}->excluding(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : List(Integer) := List{1}->excluding(elem3);
		assert fatal (cc8->size() = 1);
		assert fatal (cc8->includes(1));
	};
	
	// test List::reverse()
	//
	do {
		var cc1 : List(Integer) := List{1, 2}->reverse();
		assert fatal (cc1 = List{2, 1});

		var cc2 : List(OclAny) := List{1, ""}->reverse();
		assert fatal (cc2 = List{"", 1});

		var cc3 : List(OclAny) := List{List{""}, Set{2}}->reverse();
		assert fatal (cc3 = List{Set{2}, List{""}});
	};
			
	
	// test Collection operations
	//
	do {
		var c1 : List(Integer) := List{1};
		assert fatal(not c1->includes(""));
		assert fatal(c1->excludes(""));
		assert fatal(c1->count("") = 0);

		var c2 : Collection(String) := List{""};
		assert fatal(not c1->includesAll(c2));
		assert fatal(c1->excludesAll(c2));
		assert fatal(c1 <> c2);
		assert fatal(not (c1 = c2));
	};
			
	do {
		var v : EClass := object EClass{};
		var c1 : List(EClassifier) := List{v};
		assert fatal(c1->includes(v));
		assert fatal(not c1->excludes(v));
		assert fatal(c1->count(v) = 1);

		var c2 : Collection(EClass) := List{v};
		assert fatal(c1->includesAll(c2));
		assert fatal(not c1->excludesAll(c2));
		assert fatal(not (c1 <> c2));
		assert fatal(c1 = c2);
	};
			
	do {
		var v : EClassifier := object EClass{};
		var c1 : List(EClass) := List{v.oclAsType(EClass)};
		assert fatal(c1->includes(v));
		assert fatal(not c1->excludes(v));
		assert fatal(c1->count(v) = 1);

		var c2 : Collection(EClassifier) := List{v};
		assert fatal(c1->includesAll(c2));
		assert fatal(not c1->excludesAll(c2));
		assert fatal(not (c1 <> c2));
		assert fatal(c1 = c2);
	};
			
	do {
		var v : EClassifier := object EClass{};
		var c1 : List(EPackage) := List{object EPackage{}};
		assert fatal(not c1->includes(v));
		assert fatal(c1->excludes(v));
		assert fatal(c1->count(v) = 0);

		var c2 : Collection(EClassifier) := List{object EClass{}};
		assert fatal(not c1->includesAll(c2));
		assert fatal(c1->excludesAll(c2));
		assert fatal(c1 <> c2);
		assert fatal(not (c1 = c2));
	};
			

	// test that all operations from 11.7.5 Sequence (OCL 2.4) are applicable to List type
	do {
		var c1 : List(OclAny) := List{1, "2"};
		var c2 : List(String) := List{"1", "2"};

		// append (object: T) : List(T)
		var append : List(String) := c2->append("3");
		assert fatal (append = List{"1", "2", "3"});
		// prepend(object : T) : List(T)
		var prepend : List(String) := c2->prepend("0");
		assert fatal (prepend = List{"0", "1", "2"});
		// insertAt(index : Integer, object : T) : List(T)
		var insertAt : List(String) := c2->insertAt(1, "0");
		assert fatal (insertAt = List{"0", "1", "2"});
		// subList(lower : Integer, upper : Integer) : List(T)
		var subset : List(String) := c2->subSequence(1, 1);
		assert fatal (subset = List{"1"});
		// at(i : Integer) : T
		assert fatal (c1->at(1) = 1);
		// indexOf(obj : T) : Integer
		assert fatal (c1->indexOf(1) = 1);
		// first() : T
		assert fatal (c1->first() = 1);
		// last() : T
		assert fatal (c1->last() = "2");
		// reverse() : List(T)
		assert fatal (c1->reverse() = List{"2", 1});
		// sum() : T
		assert fatal (c1->sum().oclIsInvalid());
		// union (s : List(T)) : List(T)
		var union : List(OclAny) := c1->union(c2);
		assert fatal (union = List{1, "2", "1", "2"});
		// = (s : List(T)) : Boolean
		assert fatal (not(c1 = c2));
		// including(object : T) : List(T)
		var set4 : List(OclAny) := c2->including(2);
		assert fatal (set4 = List{"1", "2", 2});
		// excluding(object : T) : List(T)
		var set5 : List(OclAny) := c2->excluding(1);
		assert fatal (set5 = List{"1", "2"});
		// count(object : T) : Integer
		assert fatal (c1->count(1.1) = 0);
		// <> (c : Collection(T)) : Boolean
		assert fatal (c1 <> c2);
		// size() : Integer
		assert fatal (c1->size() = 2);
		// includes(object : T) : Boolean
		assert fatal (c1->includes(1));
		// excludes(object : T) : Boolean
		assert fatal (c1->excludes(2));
		// count(object : T) : Integer
		assert fatal (c1->count("2") = 1);
		// includesAll(c2 : Collection(T)) : Boolean
		assert fatal (c1->includesAll(Bag{1}));
		// excludesAll(c2 : Collection(T)) : Boolean
		assert fatal (c1->excludesAll(List{2}));
		// isEmpty() : Boolean
		assert fatal (c1->isEmpty() = false);
		// notEmpty() : Boolean
		assert fatal (c1->notEmpty());
		// max() : T
		var max : Integer := List{1, 2}->max();
		assert fatal (max = 2);
		// min() : T
		var min : Integer := List{1, 2}->min();
		assert fatal (min = 1);
		// sum() : T
		var sum : Integer := List{1, 2}->sum();
		assert fatal (sum = 3);
		// product(c2: Collection(T2)) : Set( Tuple( first: T, second: T2) )
		var prod : Set(Tuple(first:OclAny, second:String)) := c1->product(c2);
		assert fatal (prod = Set{Tuple{first:OclAny = '2', second:String = '2'}, Tuple{first:OclAny = '2', second:String = '1'}, Tuple{first:OclAny = 1, second:String = '1'}, Tuple{first:OclAny = 1, second:String = '2'}});
		// selectByKind(type : Classifier) : List(T)
		var selKind : List(Integer) := c1->selectByKind(Integer);
		assert fatal (selKind = List{1});
		assert fatal (selKind <> Bag{1});
		// selectByType(type : Classifier) : List(T)
		var selType : List(String) := c1->selectByType(String);
		assert fatal (selType = List{"2"});
		assert fatal (selType <> Bag{"2"});
		// asSet() : Set(T)
		var set : Set(OclAny) := c1->asSet();
		assert fatal (set = Set{1, "2"});
		// asOrderedSet() : OrderedSet(T)
		var orderedSet : OrderedSet(OclAny) := c1->asOrderedSet();
		assert fatal (orderedSet = OrderedSet{1, "2"});
		// asSequence() : Sequence(T)
		var sequence : Sequence(OclAny) := c1->asSequence();
		assert fatal (sequence = Sequence{1, "2"});
		// asBag() : Bag(T)
		var bag : Bag(OclAny) := c1->asBag();
		assert fatal (bag = Bag{1, "2"});
		// asList() : List(T)
		var list : List(OclAny) := c1->asList();
		assert fatal (list = List{1, "2"});
		// flatten() : List(T2)
		var flat : List(OclAny) := c1->flatten();
		assert fatal (flat = c1);
	};


	// test operations from 8.3.9 Operations on Lists (QVT 1.2)
	//
	assert fatal (List{"1", "2"} = List{"1", "2"}); 
	assert fatal (List{"1", "2"} <> List{"1", "2", "3"}); 
	do { var l := List{"1", "2"}; l->add("3"); assert fatal (l = List{"1", "2", "3"}) }; 
	do { var l : List(OclAny) := List{"1", "2"}; l->add(3); assert fatal (l = List{"1", "2", 3}) };
	do { var l := List{"1", "2"}; var l2 := l->append("3"); assert fatal (l = List{"1", "2"}); assert fatal (l2 = List{"1", "2", "3"}); l2->add(null) }; 
	do { var l := List{"1", "2"}; var l2 := l->append(3); assert fatal (l = List{"1", "2"}); assert fatal (l2 = List{"1", "2", 3}); l2->add(null) };
	assert fatal (List{"1", "2"}->asBag() = Bag{"1", "2"});
	do { var l : Collection(OclAny) := List{"1", "2"}; var l2 := l->asList(); l2->add("3"); assert fatal (l = List{"1", "2", "3"}) };
	do { var l : Sequence(OclAny) := List{"1", "2"}; var l2 := l->asList(); l2->add("3"); assert fatal (l = List{"1", "2"}); l2->add(null) };
	assert fatal (List{"1", "2"}->asOrderedSet() = OrderedSet{"1", "2"});
	assert fatal (List{"1", "2"}->asSequence() = Sequence{"1", "2"});
	assert fatal (List{"1", "2"}->asSet() = Set{"1", "2"});
	do { assert fatal (List{"1", "2"}->at(1) = "1"); assert fatal (List{"1", "2"}->at(0).oclIsInvalid()) }; 
	do { var l := List{"1", "2"}; var l2 := l->clone(); l->add("3"); assert fatal (l2 = List{"1", "2"}); l2->add(null) };
	do { assert fatal (List{"1", "2"}->count("1") = 1); assert fatal (List{"1", "2"}->count(1) = 0) };
	//assert fatal (List{List{"1"}, List{"2"}}->deepclone() = List{List{"1"}, List{"2"}});
	do { assert fatal (List{"1", "2"}->excludes(1)); assert fatal (not List{"1", "2"}->excludes("1")) };
	do { assert fatal (List{"1", "2"}->excludesAll(List{1})); assert fatal (not List{"1", "2"}->excludesAll(List{1, "1"})) };
	do { var l := List{"1", "2"}; var l2 := l->excluding("1"); l->add("3"); assert fatal (l2 = List{"2"}); l2->add(null) };
	do { var l := List{"1", "2"}; var l2 := l->excluding(1); l->add("3"); assert fatal (l2 = List{"1", "2"}); l2->add(null) };
	do { assert fatal (List{"1", "2"}->first() = "1"); assert fatal (List{}->first().oclIsInvalid()) }; 
	do { var l := List{"1", "2"}; var l2 := l->flatten(); l->add("3"); assert fatal (l2 = List{"1", "2"}); l2->add(null) };
	do { assert fatal (List{"1", "2"}->includes("1")); assert fatal (not List{"1", "2"}->includes(1)) };
	do { assert fatal (List{"1", "2"}->includesAll(List{"1"})); assert fatal (not List{"1", "2"}->includesAll(List{1, "1"})) };
	do { var l := List{"1", "2"}; var l2 := l->including("3"); l->add("4"); assert fatal (l2 = List{"1", "2", "3"}); l2->add(null) };
	do { var l := List{"1", "2"}; var l2 := l->including(3); l->add("4"); assert fatal (l2 = List{"1", "2", 3}); l2->add(null) };
	do { assert fatal (List{"1", "2"}->indexOf(1).oclIsInvalid()); assert fatal (List{"1", "2"}->indexOf("1") = 1) };
	do { var l := List{"1", "2"}; var l2 := l; l->insertAt("3", 1); assert fatal (l2 = List{"3", "1", "2"}); assert fatal (l = l2); l2->add(null) };
	do { var l := List{"1", "2"}; var l2 := l->insertAt(1, "3"); assert fatal (l2 = List{"3", "1", "2"}); assert fatal (l = List{"1", "2"}); assert fatal (List{}->insertAt(0, null)->size().oclIsInvalid()) };
	assert fatal (not List{"1", "2"}->isEmpty());
	assert fatal (List{"1", "2"}->joinfields("", "", "") = "12");
	do { assert fatal (List{"1", "2"}->last() = "2"); assert fatal (List{}->last().oclIsInvalid()) };
	assert fatal (List{"1", "2"}->max().oclIsInvalid());
	assert fatal (List{"1", "2"}->min().oclIsInvalid());
	assert fatal (List{"1", "2"}->notEmpty());
	do { var l := List{"1", "2"}; var l2 := l->prepend("3"); assert fatal (l = List{"1", "2"}); assert fatal (l2 = List{"3", "1", "2"}); l2->add(null) }; 
	do { var l := List{"1", "2"}; var l2 := l->prepend(3); assert fatal (l = List{"1", "2"}); assert fatal (l2 = List{3, "1", "2"}); l2->add(null) };
	do { var prod : Set(Tuple(first:OclAny, second:String)) := List{1, "2"}->product(List{"1", "2"});
		assert fatal (prod = Set{Tuple{first:OclAny = '2', second:String = '2'}, Tuple{first:OclAny = '2', second:String = '1'}, Tuple{first:OclAny = 1, second:String = '1'}, Tuple{first:OclAny = 1, second:String = '2'}}) };
	do { var l := List{"1", "1", "2"}; l->remove("1"); assert fatal (l = List{"2"}) };
	do { var l := List{"1", "1", "2"}; l->removeAll(List{"1"}); l->removeAll(Set{"2"}); assert fatal (l = List{}) };
	do { var l := List{"1", "2"}; assert fatal (l->removeAt(2) = "2"); assert fatal (l = List{"1"}); assert fatal (List{}->removeAt(0).oclIsInvalid()) };
	do { var l := List{"1", "2"}; assert fatal (l->removeFirst() = "1"); assert fatal (l = List{"2"}); assert fatal (List{}->removeFirst().oclIsInvalid()) };
	do { var l := List{"1", "2"}; assert fatal (l->removeLast() = "2"); assert fatal (l = List{"1"}); assert fatal (List{}->removeLast().oclIsInvalid()) };
	do { var l:= List{"1", "2"}; var l2 := l->reverse(); assert fatal (l = List{"1", "2"}); assert fatal (l2 = List{"2", "1"}); l2->add(null) };
	do { var l2 := List{1, "2"}->selectByKind(OclAny); assert fatal (l2 = List{1, "2"}); l2->add(null) };
	do { var l2 : List(Integer) := List{1, "2"}->selectByType(Integer); assert fatal (l2 = List{1}); l2->add(null) };
	assert fatal (List{1, "2"}->size() = 2);
	do { var l2 := List{"1", "2"}->subSequence(1,2); assert fatal (l2 = List{"1", "2"}); assert fatal (List{}->subSequence(0, 0)->size().oclIsInvalid()); l2->add(null) };
	do { assert fatal (List{1, 2}->sum() = 3); assert fatal (List{}->sum() = null) };
	do { var l := List{"1", "2"}; var l2 := l->union(List{1, 2}); assert fatal (l2 = List{"1", "2", 1, 2}); l2->add(null) };

}
