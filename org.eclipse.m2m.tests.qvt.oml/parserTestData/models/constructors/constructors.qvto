
modeltype Ecore uses "http://www.eclipse.org/emf/2002/Ecore";

transformation constructors(out x  : Ecore, out y : Ecore);


constructor Cls::Cls (i : Integer) 
{
	name := "foo" + i.toString();
}

intermediate class Cls {
	name : String;
	references base : Cls;
	composes subclasses : Cls[*] ordered opposites base;
}

constructor Cls::Cls () 
{
	name := "foo";
}

constructor Cls::Cls (r : Real) 
{
	name := "foo" + r.toString();
}

-- default constructor
constructor EClass::EClass()
{
	-- optionally reference to variable representing the instantiated object
	result.name := "default";	 
}

-- constructor with params
constructor EClass::EClass(s : String, op : EOperation)
{
	name := s;
	eOperations += op;	 
}

-- resultless mapping with constructor-like name
mapping inout EClass::EClass(s : String)
{
	name := s;
}

main() {
	var c1 := new EClass();
	assert fatal (c1.name = "default");

	c1.map EClass("foo");
	assert fatal (c1.name = "foo");
	
	var c2 := new EClass("foo", new EOperation());
	-- two EClass's and one EOperation
	assert fatal (x.objects()->size() = 3);
	assert fatal (y.objects()->size() = 0);
	
	var c3 := new EClass@y();
	assert fatal (x.objects()->size() = 3);
	assert fatal (y.objects()->size() = 1);
	
	var ci := new Cls();
	assert fatal (ci.name = "foo");

	ci.subclasses += new Cls(1);
	assert fatal (ci.subclasses->at(1).name = "foo1");

	ci.subclasses += new Cls(2.0);
	assert fatal (ci.subclasses->at(2).name = "foo2.0");
}
