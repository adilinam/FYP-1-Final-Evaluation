transformation resolve_notype;

modeltype A uses ecore('http://www.eclipse.org/emf/2002/Ecore');

mapping main(in model: ecore::EPackage): ecore::EPackage {
	init {
		var all := model.allInstances(ecore::ENamedElement)->including(model)->asOrderedSet();
		var all1 := all.createEClass1();
		var all2 := all.createEClass2();
		var i := 1;
		var n := all1->size();
		var resAll : OrderedSet(ecore::EClass) := OrderedSet{};
	    while (i <= n) {
	    	resAll += all->at(i).resolve().oclAsType(ecore::EClass);
	    	i := i + 1;
    	};
	}
    	name := 'result';
    	eClassifiers += selectionSort(resAll);
}

mapping ecore::ENamedElement::createEClass1() : ecore::EClass {
		name := 'mapped1' + self.name;
}

mapping ecore::ENamedElement::createEClass2() : ecore::EClass {
		name := 'mapped2' + self.name;
}

query selectionSort(in ar: OrderedSet(ecore::EClass)): OrderedSet(ecore::EClass) {
	return if ar->size() = 0 then OrderedSet{} 
	else
		let 
			min = min(ar), 
			rest = ar->excluding(min)->asOrderedSet(),
			res = min->asSequence()->union(selectionSort(rest)->asSequence())->asOrderedSet() 
		in 
			res
	endif;
}

query min(in ar: OrderedSet(ecore::EClass)): ecore::EClass {
		let 
			i = 2,
			n = ar->size(),
			min = ar->at(1),
			res = while (i <= n) {
				min := if (min.name <= ar->at(i).name) then min else ar->at(i) endif;
				i := i + 1;
    		} 
		in 
			min 
}
