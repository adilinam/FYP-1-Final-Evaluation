modeltype Ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation intermProperties(out Ecore);

intermediate class MyOperation {
	references refOwner : MyBaseClass[0 .. 1] ordered opposites operations [*];
	
	readonly defStrings : Set(String)[0 .. 1] = Set{'1'}; 
	readonly defIntegers : Set(Integer)[3] = Set{Set{1, 2, 3}}; 
}

intermediate class MyBaseClass {
	composes operations : MyOperation[*];
	
	references ref1 : MyBaseClass;
	references ref2 : MyBaseClass;

	composes containmentRef1 : MyBaseClass;
	composes containmentRef2 : MyBaseClass;
	
	static staticData : String = '1';
	static references staticRef : MyBaseClass; 
}

intermediate class MyDerived extends MyBaseClass {
	<<id>> uuid:String [1]; -- a mandatory qualifying uuid attribute
	
	data1 : Set(String)[0 .. 1];
	data2 : Set(String)[0 .. *];
}

main() {
	var op := object MyOperation{};
	assert fatal (op.defStrings->includes('1'));
	assert fatal (op.defIntegers->flatten()->sum() = 6);

	var cls := object MyBaseClass{};
	assert fatal (cls.staticData = '1');
	assert fatal (cls.staticRef = null);

	cls.operations += op;
	assert fatal (op.refOwner = cls);
	
	var v1 := object MyBaseClass{};
	var v2 := object MyBaseClass{};
	var vBase := object MyBaseClass{};
	
	vBase.staticData := '2';
	vBase.staticRef := v1;
	assert fatal (cls.staticData = '2');
	assert fatal (cls.staticRef = v1);
	assert fatal (vBase.staticData = '2');
	assert fatal (vBase.staticRef = v1);

	vBase.ref1 := v1;
	vBase.ref2 := v1;
	assert fatal (vBase.ref1 = v1 and vBase.ref2 = v1);

	vBase.containmentRef1 := v2;
	assert fatal (vBase.containmentRef1 = v2 and vBase.containmentRef2 = null);
	vBase.containmentRef2 := v2;
	assert fatal (vBase.containmentRef1 = null and vBase.containmentRef2 = v2);

	var d1 := object MyDerived{uuid := 'id'};	
	d1.data1 += 'a';
	d1.data2 += Set{Set{'a'}};
	assert fatal (d1.data1->size() = 1 and d1.data2->size() = 1);
}
