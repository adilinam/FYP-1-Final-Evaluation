modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
transformation bug325192();

constructor EClass::EClass() {
	result.name := "default";	 
}

main() {
	var v1 : Set(EClass) = object EClass{}.map mapToSet();
	assert fatal (v1->size() = 2);
	assert fatal (v1->select(name = "default")->size() = 1);

	var v2 : Set(EClass) = object EClass{}.map mapToSetInc();
	assert fatal (v2->size() = 2);

	var v3 : Sequence(EClass) = object EClass{}.map mapToSequence();
	assert fatal (v3->size() = 2);

	var v4 : Sequence(EClass) = object EClass{}.map mapToSequenceInc();
	assert fatal (v4->size() = 2);

	var v5 : Bag(EClass) = object EClass{}.map mapToBag();
	assert fatal (v5->size() = 2);

	var v6 : Bag(EClass) = object EClass{}.map mapToBagInc();
	assert fatal (v6->size() = 2);

	var v7 : List(EClass) = object EClass{}.map mapToList();
	assert fatal (v7->size() = 2);

	var v8 : List(EClass) = object EClass{}.map mapToListInc();
	assert fatal (v8->size() = 2);
	v8->add(object EClass{});
	assert fatal (v8->size() = 3);
	
	var resolved8 : List(EClass) = resolveoneIn(EClass::mapToListInc, List(EClass));
	assert fatal (resolved8->size() = 1);

	var v9 : Dict(EClass, EClass) = object EClass{}.map mapToDict();
	assert fatal (v9->size() = 1);

}

mapping EClass::mapToSet() : Set(EClass) {
	init {
		result := object EClass{}->asSet();
		result += new EClass();
	}
}

mapping EClass::mapToSetInc() : Set(EClass) {
	init {
		result += object EClass{};
		result += object EClass{};
	}
}

mapping EClass::mapToSequence() : Sequence(EClass) {
	init {
		result := object EClass{}->asSequence();
		result += object EClass{};
	}
}

mapping EClass::mapToSequenceInc() : Sequence(EClass) {
	init {
		result += object EClass{};
		result += object EClass{};
	}
}

mapping EClass::mapToBag() : Bag(EClass) {
	init {
		result := object EClass{}->asBag();
		result += object EClass{};
	}
}

mapping EClass::mapToBagInc() : Bag(EClass) {
	init {
		result += object EClass{};
		result += object EClass{};
	}
}

mapping EClass::mapToList() : List(EClass) {
	init {
		result := object EClass{}->asList();
	}
	result += object EClass{};
}

mapping EClass::mapToListInc() : List(EClass) {
	init {
		result += object EClass{};
	}
	result += object EClass{};
}

mapping EClass::mapToDict() : Dict(EClass, EClass) {
	init {
		result += object EClass{};
	}
	result += object EClass{};
}

