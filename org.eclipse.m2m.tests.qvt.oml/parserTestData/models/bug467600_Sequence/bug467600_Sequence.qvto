modeltype ECORE "strict" uses "http://www.eclipse.org/emf/2002/Ecore";
	
transformation bug467600_Sequence();

main() {

	// test Sequence::union(Sequence)
	//
	do {
		var cc1 : Sequence(OclAny) := Sequence{1}->union(Sequence{""});
		assert fatal (cc1->size() = 2);
		assert fatal (cc1->includes(1));
		
		var cc2 : Sequence(Integer) := Sequence{1}->union(Sequence{2});
		assert fatal (cc2->size() = 2);
		assert fatal (cc2->includes(2));
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : Sequence(EClassifier) := Sequence{object EClass{}}->union(Sequence{elem1});   
		assert fatal (cc3->size() = 2);
		assert fatal (cc3->includes(elem1));
	
		var cc31 : Sequence(EClassifier) := Sequence{elem1}->union(Sequence{object EClass{}});   
		assert fatal (cc31->size() = 2);
		assert fatal (cc31->includes(elem1));
	
		var cc32 : Sequence(EClass) := Sequence{}->union(Sequence{object EClass{}});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : Sequence(OclVoid) := Sequence{}->union(Sequence{});   
		assert fatal (cc33->size() = 0);
	
		var cc34 : Sequence(EClass) := Sequence{object EClass{}}->union(Sequence{});   
		assert fatal (cc34->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : Sequence(EClass) := Sequence{object EClass{}}->union(Sequence{elem2});   
		assert fatal (cc4->size() = 2);
		assert fatal (cc4->includes(elem2));
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : Sequence(Element) := Sequence{object EClass{}}->union(Sequence{elem3});   
		assert fatal (cc5->size() = 2);
		assert fatal (cc5->includes(elem3));

		var cc6 : Sequence(EClass) := Sequence{object EClass{}}->union(Sequence{null});   
		assert fatal (cc6->size() = 2);
		assert fatal (cc6->includes(null));

		var cc7 : Sequence(EClass) := Sequence{object EClass{}}->union(Sequence{invalid});   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : Sequence(OclAny) := Sequence{1}->union(Sequence{elem3});
		assert fatal (cc8->size() = 2);
		assert fatal (cc8->includes(elem3));
	};
	
	// test Sequence::append(o) and Sequence::indexOf(o)
	//
	do {
		var cc1 : Sequence(OclAny) := Sequence{1}->append("");
		assert fatal (cc1->indexOf("") = 2);
		
		var cc2 : Sequence(Integer) := Sequence{1}->append(2);
		assert fatal (cc2->indexOf(1) = 1);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : Sequence(EClassifier) := Sequence{object EClass{}}->append(elem1);   
		assert fatal (cc3->indexOf(elem1) = 2);
	
		var cc31 : Sequence(EClassifier) := Sequence{elem1}->append(object EClass{});   
		assert fatal (cc31->indexOf(elem1) = 1);
	
		var cc32 : Sequence(EClass) := Sequence{}->append(object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : Sequence(OclVoid) := Sequence{}->append(null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : Sequence(EClass) := Sequence{elem2}->append(elem2);
		assert fatal (cc4->size() = 2);   
		assert fatal (cc4->indexOf(elem2) = 1);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : Sequence(Element) := Sequence{object EClass{}}->append(elem3);   
		assert fatal (cc5->indexOf(elem3) = 2);

		var cc6 : Sequence(EClass) := Sequence{object EClass{}}->append(null);   
		assert fatal (cc6->indexOf(null) = 2);

		var cc7 : Sequence(EClass) := Sequence{object EClass{}}->append(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : Sequence(OclAny) := Sequence{1}->append(elem3);
		assert fatal (cc8->indexOf(elem3) = 2);
	};
	
	// test Sequence::prepend(o) and Sequence::indexOf(o)
	//
	do {
		var cc1 : Sequence(OclAny) := Sequence{1}->prepend("");
		assert fatal (cc1->indexOf("") = 1);
		
		var cc2 : Sequence(Integer) := Sequence{1}->prepend(2);
		assert fatal (cc2->indexOf(1) = 2);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : Sequence(EClassifier) := Sequence{object EClass{}}->prepend(elem1);   
		assert fatal (cc3->indexOf(elem1) = 1);
	
		var cc31 : Sequence(EClassifier) := Sequence{elem1}->prepend(object EClass{});   
		assert fatal (cc31->indexOf(elem1) = 2);
	
		var cc32 : Sequence(EClass) := Sequence{}->prepend(object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : Sequence(OclVoid) := Sequence{}->prepend(null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : Sequence(EClass) := Sequence{elem2}->prepend(elem2);
		assert fatal (cc4->size() = 2);   
		assert fatal (cc4->indexOf(elem2) = 1);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : Sequence(Element) := Sequence{object EClass{}}->prepend(elem3);   
		assert fatal (cc5->indexOf(elem3) = 1);

		var cc6 : Sequence(EClass) := Sequence{object EClass{}}->prepend(null);   
		assert fatal (cc6->indexOf(null) = 1);

		var cc7 : Sequence(EClass) := Sequence{object EClass{}}->prepend(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : Sequence(OclAny) := Sequence{1}->prepend(elem3);
		assert fatal (cc8->indexOf(elem3) = 1);
	};
	
	// test Sequence::insertAt(o) and Sequence::indexOf(o)
	//
	do {
		var cc1 : Sequence(OclAny) := Sequence{1}->insertAt(1, "");
		assert fatal (cc1->indexOf("") = 1);
		
		var cc2 : Sequence(Integer) := Sequence{1}->insertAt(2, 2);
		assert fatal (cc2->indexOf(1) = 1);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : Sequence(EClassifier) := Sequence{object EClass{}}->insertAt(1, elem1);   
		assert fatal (cc3->indexOf(elem1) = 1);
	
		var cc31 : Sequence(EClassifier) := Sequence{elem1}->insertAt(2, object EClass{});   
		assert fatal (cc31->indexOf(elem1) = 1);
	
		var cc32 : Sequence(EClass) := Sequence{}->insertAt(1, object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : Sequence(OclVoid) := Sequence{}->insertAt(1, null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : Sequence(EClass) := Sequence{elem2}->insertAt(2, elem2);
		assert fatal (cc4->size() = 2);   
		assert fatal (cc4->indexOf(elem2) = 1);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : Sequence(Element) := Sequence{object EClass{}}->insertAt(1, elem3);   
		assert fatal (cc5->indexOf(elem3) = 1);

		var cc6 : Sequence(EClass) := Sequence{object EClass{}}->insertAt(2, null);   
		assert fatal (cc6->indexOf(null) = 2);

		var cc7 : Sequence(EClass) := Sequence{object EClass{}}->insertAt(1, invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : Sequence(OclAny) := Sequence{1}->insertAt(2, elem3);
		assert fatal (cc8->indexOf(elem3) = 2);
	};
	
	// test Sequence::including(o)
	//
	do {
		var cc1 : Sequence(OclAny) := Sequence{1}->including("");
		assert fatal (cc1->size() = 2);
		assert fatal (cc1->includes(1));
		
		var cc2 : Sequence(Integer) := Sequence{1}->including(2);
		assert fatal (cc2->size() = 2);
		assert fatal (cc2->includes(2));
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : Sequence(EClassifier) := Sequence{object EClass{}}->including(elem1);   
		assert fatal (cc3->size() = 2);
		assert fatal (cc3->includes(elem1));
	
		var cc31 : Sequence(EClassifier) := Sequence{elem1}->including(object EClass{});   
		assert fatal (cc31->size() = 2);
		assert fatal (cc31->includes(elem1));
	
		var cc32 : Sequence(EClass) := Sequence{}->including(object EClass{});   
		assert fatal (cc32->size() = 1);
	
		var cc33 : Sequence(OclVoid) := Sequence{}->including(null);   
		assert fatal (cc33->size() = 1);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : Sequence(EClass) := Sequence{object EClass{}}->including(elem2);   
		assert fatal (cc4->size() = 2);
		assert fatal (cc4->includes(elem2));
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : Sequence(Element) := Sequence{object EClass{}}->including(elem3);   
		assert fatal (cc5->size() = 2);
		assert fatal (cc5->includes(elem3));

		var cc6 : Sequence(EClass) := Sequence{object EClass{}}->including(null);   
		assert fatal (cc6->size() = 2);
		assert fatal (cc6->includes(null));

		var cc7 : Sequence(EClass) := Sequence{object EClass{}}->including(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : Sequence(OclAny) := Sequence{1}->including(elem3);
		assert fatal (cc8->size() = 2);
		assert fatal (cc8->includes(elem3));
	};
	
	// test Sequence::excluding(o)
	//
	do {
		var cc1 : Sequence(Integer) := Sequence{1}->excluding("");
		assert fatal (cc1->size() = 1);
		assert fatal (cc1->includes(1));
		
		var cc2 : Sequence(Integer) := Sequence{1}->excluding(1);
		assert fatal (cc2->size() = 0);
	
		var elem1 : EClassifier = object EClass{};
		var cc3 : Sequence(EClass) := Sequence{object EClass{}}->excluding(elem1);   
		assert fatal (cc3->size() = 1);
	
		var cc31 : Sequence(EClassifier) := Sequence{elem1}->excluding(object EClass{});   
		assert fatal (cc31->size() = 1);
		assert fatal (cc31->includes(elem1));
	
		var cc32 : Sequence(OclVoid) := Sequence{}->excluding(object EClass{});   
		assert fatal (cc32->size() = 0);
	
		var cc33 : Sequence(OclVoid) := Sequence{}->excluding(null);   
		assert fatal (cc33->size() = 0);
	
		var elem2 : EClass = object EClass{}; 
		var cc4 : Sequence(EClass) := Sequence{elem2}->excluding(elem2);   
		assert fatal (cc4->size() = 0);
	
		var elem3 : EPackage = object EPackage{}; 
		var cc5 : Sequence(EPackage) := Sequence{elem3}->excluding(object EClass{});   
		assert fatal (cc5->size() = 1);
		assert fatal (cc5->includes(elem3));

		var cc6 : Sequence(EClass) := Sequence{object EClass{}}->excluding(null);   
		assert fatal (cc6->size() = 1);

		var cc7 : Sequence(EClass) := Sequence{object EClass{}}->excluding(invalid);   
		assert fatal (cc7->size().oclIsInvalid());

		var cc8 : Sequence(Integer) := Sequence{1}->excluding(elem3);
		assert fatal (cc8->size() = 1);
		assert fatal (cc8->includes(1));
	};
	
	// test Sequence::reverse()
	//
	do {
		var cc1 : Sequence(Integer) := Sequence{1, 2}->reverse();
		assert fatal (cc1 = Sequence{2, 1});

		var cc2 : Sequence(OclAny) := Sequence{1, ""}->reverse();
		assert fatal (cc2 = Sequence{"", 1});

		var cc3 : Sequence(OclAny) := Sequence{Sequence{""}, Set{2}}->reverse();
		assert fatal (cc3 = Sequence{Set{2}, Sequence{""}});
	};
			
	
	// test Collection operations
	//
	do {
		var c1 : Sequence(Integer) := Sequence{1};
		assert fatal(not c1->includes(""));
		assert fatal(c1->excludes(""));
		assert fatal(c1->count("") = 0);

		var c2 : Collection(String) := Sequence{""};
		assert fatal(not c1->includesAll(c2));
		assert fatal(c1->excludesAll(c2));
		assert fatal(c1 <> c2);
		assert fatal(not (c1 = c2));
	};
			
	do {
		var v : EClass := object EClass{};
		var c1 : Sequence(EClassifier) := Sequence{v};
		assert fatal(c1->includes(v));
		assert fatal(not c1->excludes(v));
		assert fatal(c1->count(v) = 1);

		var c2 : Collection(EClass) := Sequence{v};
		assert fatal(c1->includesAll(c2));
		assert fatal(not c1->excludesAll(c2));
		assert fatal(not (c1 <> c2));
		assert fatal(c1 = c2);
	};
			
	do {
		var v : EClassifier := object EClass{};
		var c1 : Sequence(EClass) := Sequence{v.oclAsType(EClass)};
		assert fatal(c1->includes(v));
		assert fatal(not c1->excludes(v));
		assert fatal(c1->count(v) = 1);

		var c2 : Collection(EClassifier) := Sequence{v};
		assert fatal(c1->includesAll(c2));
		assert fatal(not c1->excludesAll(c2));
		assert fatal(not (c1 <> c2));
		assert fatal(c1 = c2);
	};
			
	do {
		var v : EClassifier := object EClass{};
		var c1 : Sequence(EPackage) := Sequence{object EPackage{}};
		assert fatal(not c1->includes(v));
		assert fatal(c1->excludes(v));
		assert fatal(c1->count(v) = 0);

		var c2 : Collection(EClassifier) := Sequence{object EClass{}};
		assert fatal(not c1->includesAll(c2));
		assert fatal(c1->excludesAll(c2));
		assert fatal(c1 <> c2);
		assert fatal(not (c1 = c2));
	};
			

	// test operations from 11.7.5 Sequence (OCL 2.4)
	do {
		var c1 : Sequence(OclAny) := Sequence{1, "2"};
		var c2 : Sequence(String) := Sequence{"1", "2"};

		// append (object: T) : Sequence(T)
		var append : Sequence(String) := c2->append("3");
		assert fatal (append = Sequence{"1", "2", "3"});
		// prepend(object : T) : Sequence(T)
		var prepend : Sequence(String) := c2->prepend("0");
		assert fatal (prepend = Sequence{"0", "1", "2"});
		// insertAt(index : Integer, object : T) : Sequence(T)
		var insertAt : Sequence(String) := c2->insertAt(1, "0");
		assert fatal (insertAt = Sequence{"0", "1", "2"});
		// subSequence(lower : Integer, upper : Integer) : Sequence(T)
		var subset : Sequence(String) := c2->subSequence(1, 1);
		assert fatal (subset = Sequence{"1"});
		// at(i : Integer) : T
		assert fatal (c1->at(1) = 1);
		// indexOf(obj : T) : Integer
		assert fatal (c1->indexOf(1) = 1);
		// first() : T
		assert fatal (c1->first() = 1);
		// last() : T
		assert fatal (c1->last() = "2");
		// reverse() : Sequence(T)
		assert fatal (c1->reverse() = Sequence{"2", 1});
		// sum() : T
		assert fatal (c1->sum().oclIsInvalid());
		// union (s : Sequence(T)) : Sequence(T)
		var union : Sequence(OclAny) := c1->union(c2);
		assert fatal (union = Sequence{1, "2", "1", "2"});
		// = (s : Sequence(T)) : Boolean
		assert fatal (not(c1 = c2));
		// including(object : T) : Sequence(T)
		var set4 : Sequence(OclAny) := c2->including(2);
		assert fatal (set4 = Sequence{"1", "2", 2});
		// excluding(object : T) : Sequence(T)
		var set5 : Sequence(OclAny) := c2->excluding(1);
		assert fatal (set5 = Sequence{"1", "2"});
		// count(object : T) : Integer
		assert fatal (c1->count(1.1) = 0);
		// <> (c : Collection(T)) : Boolean
		assert fatal (c1 <> c2);
		// size() : Integer
		assert fatal (c1->size() = 2);
		// includes(object : T) : Boolean
		assert fatal (c1->includes(1));
		// excludes(object : T) : Boolean
		assert fatal (c1->excludes(2));
		// count(object : T) : Integer
		assert fatal (c1->count("2") = 1);
		// includesAll(c2 : Collection(T)) : Boolean
		assert fatal (c1->includesAll(Bag{1}));
		// excludesAll(c2 : Collection(T)) : Boolean
		assert fatal (c1->excludesAll(Sequence{2}));
		// isEmpty() : Boolean
		assert fatal (c1->isEmpty() = false);
		// notEmpty() : Boolean
		assert fatal (c1->notEmpty());
		// max() : T
		var max : Integer := Sequence{1, 2}->max();
		assert fatal (max = 2);
		// min() : T
		var min : Integer := Sequence{1, 2}->min();
		assert fatal (min = 1);
		// sum() : T
		var sum : Integer := Sequence{1, 2}->sum();
		assert fatal (sum = 3);
		// product(c2: Collection(T2)) : Set( Tuple( first: T, second: T2) )
		var prod : Set(Tuple(first:OclAny, second:String)) := c1->product(c2);
		assert fatal (prod = Set{Tuple{first:OclAny = '2', second:String = '2'}, Tuple{first:OclAny = '2', second:String = '1'}, Tuple{first:OclAny = 1, second:String = '1'}, Tuple{first:OclAny = 1, second:String = '2'}});
		// selectByKind(type : Classifier) : Sequence(T)
		var selKind : Sequence(Integer) := c1->selectByKind(Integer);
		assert fatal (selKind = Sequence{1});
		assert fatal (selKind <> Bag{1});
		// selectByType(type : Classifier) : Sequence(T)
		var selType : Sequence(String) := c1->selectByType(String);
		assert fatal (selType = Sequence{"2"});
		assert fatal (selType <> Bag{"2"});
		// asSet() : Set(T)
		var set : Set(OclAny) := c1->asSet();
		assert fatal (set = Set{1, "2"});
		// asOrderedSet() : OrderedSet(T)
		var orderedSet : OrderedSet(OclAny) := c1->asOrderedSet();
		assert fatal (orderedSet = OrderedSet{1, "2"});
		// asSequence() : Sequence(T)
		var sequence : Sequence(OclAny) := c1->asSequence();
		assert fatal (sequence = Sequence{1, "2"});
		// asBag() : Bag(T)
		var bag : Bag(OclAny) := c1->asBag();
		assert fatal (bag = Bag{1, "2"});
		// asList() : List(T)
		var list : List(OclAny) := c1->asList();
		assert fatal (list = List{1, "2"});
		// flatten() : Sequence(T2)
		var flat : Sequence(OclAny) := c1->flatten();
		assert fatal (flat = c1);
	};
			
}
