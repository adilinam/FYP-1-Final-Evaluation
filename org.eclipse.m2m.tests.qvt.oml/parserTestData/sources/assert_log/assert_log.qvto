transformation assert_log;

modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

main() {
	var LEVEL : Integer := 1;
	var model :EClass := null;	
	
	log('message');
	log('message', model);	
	log('message', model, LEVEL);
	
	log('message') when model.name <> '';
	log('message', model) when model.name <> '';	
	log('message', model, LEVEL) when model.name <> '';
}

mapping createPackage(in dummy: ecore::EPackage) : ecore::EObject {
	init {
		var LEVEL : Integer := 1;
		var model :EClass := null;	
	
		log('message');
		log('message', model);	
		log('message', model, LEVEL);
		
		log('message') when model.name <> '';
		log('message', model) when model.name <> '';	
		log('message', model, LEVEL) when model.name <> '';
	
		assert (model.name <> '');	
		assert error (model.name <> '');	
		assert warning (model.name <> '');
		assert fatal (model.name <> '');	
	
		assert (model.name <> '') with log('message');	
		assert error (model.name <> '') with log('message');	
		assert warning (model.name <> '') with log('message');
		assert fatal (model.name <> '') with log('message');	
		
		assert fatal (model.name <> '') with log('message') when false;	
	}
	
	end {	
		log('message');
		log('message', model);	
		log('message', model, LEVEL);
		
		log('message') when model.name <> '';
		log('message', model) when model.name <> '';	
		log('message', model, LEVEL) when model.name <> '';
	
		assert (model.name <> '');	
		assert error (model.name <> '');	
		assert warning (model.name <> '');
		assert fatal (model.name <> '');	
	
		assert (model.name <> '') with log('message');	
		assert error (model.name <> '') with log('message');	
		assert warning (model.name <> '') with log('message');
		assert fatal (model.name <> '') with log('message');	
		
		assert fatal (model.name <> '') with log('message') when false;		
	}
}

query EClass::fooQuery() : String {
	var LEVEL : Integer := 1;
	var model :EClass := null;	

	log('message');
	log('message', model);	
	log('message', model, LEVEL);
	
	log('message') when model.name <> '';
	log('message', model) when model.name <> '';	
	log('message', model, LEVEL) when model.name <> '';

	assert (model.name <> '');	
	assert error (model.name <> '');	
	assert warning (model.name <> '');
	assert fatal (model.name <> '');	

	assert (model.name <> '') with log('message');	
	assert error (model.name <> '') with log('message');	
	assert warning (model.name <> '') with log('message');
	assert fatal (model.name <> '') with log('message');	
	
	assert fatal (model.name <> '') with log('message') when false;	
 
	return 'result';
}   

query EClass::fooQuery2() : String {
	if 10 > 100 then {
		var LEVEL : Integer := 1;
		var model :EClass := null;	
	
		log('message');
		log('message', model);	
		log('message', model, LEVEL);
		
		log('message') when model.name <> '';
		log('message', model) when model.name <> '';	
		log('message', model, LEVEL) when model.name <> '';
	
		assert (model.name <> '');	
		assert error (model.name <> '');	
		assert warning (model.name <> '');
		assert fatal (model.name <> '');	
	
		assert (model.name <> '') with log('message');	
		assert error (model.name <> '') with log('message');	
		assert warning (model.name <> '') with log('message');
		assert fatal (model.name <> '') with log('message');	
		
		assert fatal (model.name <> '') with log('message') when false;	
 	} endif;
 
	return 'result';
}   
