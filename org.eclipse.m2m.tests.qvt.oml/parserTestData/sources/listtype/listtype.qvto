import org.bar.Foo;
import org.bar.Collections;

library listtype;

helper testCase() : Boolean {

	var c : Collection(String) := Set { 'a', 'b'};
	var setElements : Set(String) := /*<error>*/newList(c)/*</error>*/;
	var bagElements : Bag(String) := /*<error>*/newList(c)/*</error>*/;
	var seqElements : Sequence(String) := newList(c);	
	var oSetElements : OrderedSet(String) := /*<error>*/newList(c)/*</error>*/;	
	
	var chars := OrderedSet{ 'a', 'b', 'c'  };
	var listElements := newList(chars);
	listElements := /*<error>*/Set { '' }/*</error>*/;
	listElements := /*<error>*/Bag { '' }/*</error>*/; 
	listElements := Sequence { '' };
	listElements := /*<error>*/OrderedSet { '' }/*</error>*/;

	-- correct samples
	var conformantCollection : Collection(OclAny) := listElements;
	var nonconFormantCollection : Collection(Real) := /*<error>*/listElements/*</error>*/; 
	
	var listCopy := echoList(listElements);
	-- check List is conformant to Collection type 
	-- and can be used as normal collection
	assert fatal (chars->includesAll(listCopy));
	
	-- test all List operations
	listElements->add('x');
	listElements->prepend('y');	
	var element : String :=listElements->genericListElementAt(1);
	element :=listElements->genericListElementAt(listElements->size());	

	-- test element type conformance
	var empty : List(String) := Bag {}->asList();    	  
 	var nonInitList : List(String);
  	nonInitList:= invalid;  

	var listOfVoids : List(OclVoid) := null;
	var voidElement : OclVoid := listOfVoids->genericListElementAt(1);
	var aStr : String := listOfVoids->genericListElementAt(1);
	listOfVoids->append(null);
	-- can other element but 'null' into a list
	listOfVoids->append('');


	-- test String collection specific operation
	var strElement := c->stringCollectionAny();
  
    -- test common collection generic operation
	c := c->commonCollectionOperation();
	Bag { 'a' }->commonCollectionOperation();
	Sequence { 10 }->commonCollectionOperation();
	Set { true }->commonCollectionOperation();
	OrderedSet { 'a' }->commonCollectionOperation();
	
	var strList : List(String);
	-- test common collection opersation on a list
	c := strList->commonCollectionOperation();
	-- assign list to a collection
   	c:=strList;
	
	strList := Bag { 'sd' }->asList(); 
	strList := Sequence { 'sd' }->asList(); 
	strList := Set { 'sd' }->asList();  
	strList := OrderedSet { 'sd' }->asList();     
	
	var s : String := strList->genericListElementAt(1); 
	
	var setOfInt : Set(Integer) := Set{1}->setOperation();
	var setOfAny : Set(OclAny) := OrderedSet {2}->setOperation();
	
	return true;
}